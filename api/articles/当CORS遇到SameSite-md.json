{"title":"当CORS遇到SameSite","slug":"当CORS遇到SameSite-md","date":"2020-09-11T08:58:31.000Z","updated":"2022-01-04T08:59:30.620Z","comments":true,"path":"api/articles/当CORS遇到SameSite-md.json","excerpt":null,"covers":null,"content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><blockquote>\n<p>A cookie associated with a cross-site resource at <a href=\"http://a.com/\">http://a.com/</a> was set without the ‘SameSite’ attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with ‘SameSite=None’ and ‘Secure’. You can review cookies in developer tools under Application&gt;Storage&gt;Cookies and see more details at <a href=\"https://www.chromestatus.com/feature/5088147346030592\">https://www.chromestatus.com/feature/5088147346030592</a> and <a href=\"https://www.chromestatus.com/feature/5633521622188032\">https://www.chromestatus.com/feature/5633521622188032</a>.</p>\n</blockquote>\n<p>于是发现是 Chrome 升级 80 导致未设置 SameSite 的 Cookie 默认值是Lax。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"1-紧急处理\"><a href=\"#1-紧急处理\" class=\"headerlink\" title=\"1.紧急处理\"></a>1.紧急处理</h2><p>其实是在服务方解决问题之前让用户先稍微兼容一下。方案很简单：</p>\n<p>换个浏览器<br>or</p>\n<p>打开 chrome://flags/#same-site-by-default-cookies，关掉 SameSite by default cookies 然后重启浏览器</p>\n<h2 id=\"2-方法一：跨域-Set-Cookie\"><a href=\"#2-方法一：跨域-Set-Cookie\" class=\"headerlink\" title=\"2. 方法一：跨域 + Set-Cookie\"></a>2. 方法一：跨域 + Set-Cookie</h2><p>首先就是报错信息里提到的，让服务端同学在 Set-Cookie 的时候加上 SameSite=None; Secure。但是我们的后台系统都是对内使用的，很多域名都没有申请证书。而 “Secure” 属性却表示 Cookie 只能随 HTTPS 请求发送。<br>这就很尴尬。<br>要不申请证书，要不换域名。<br>但是长远来看，https是大趋势，趁着这个机会升级成 HTTPS 也是可取的。<br>然而有些版本的浏览器并不识别 SameSite=None，需要特殊处理。</p>\n<h2 id=\"3-方法二：改成同域请求\"><a href=\"#3-方法二：改成同域请求\" class=\"headerlink\" title=\"3. 方法二：改成同域请求\"></a>3. 方法二：改成同域请求</h2><p>既然 SameSite=Lax 限制的是跨域 Cookie 携带，那么改成同域自然没有问题了。<br>但因为现在项目都是前后端分离部署的，所以请运维同学配了一下匹配到 ^/api/ 开头的请求都转发到服务端的地址。前端请求接口时直接用相对路径请求。<br>问题解决</p>\n","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><blockquote>\n<p>A cookie associated with a cross-site resource at <a href=\"http://a.com/\">http://a.com/</a> was set without the ‘SameSite’ attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with ‘SameSite=None’ and ‘Secure’. You can review cookies in developer tools under Application&gt;Storage&gt;Cookies and see more details at <a href=\"https://www.chromestatus.com/feature/5088147346030592\">https://www.chromestatus.com/feature/5088147346030592</a> and <a href=\"https://www.chromestatus.com/feature/5633521622188032\">https://www.chromestatus.com/feature/5633521622188032</a>.</p>\n</blockquote>\n<p>于是发现是 Chrome 升级 80 导致未设置 SameSite 的 Cookie 默认值是Lax。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"1-紧急处理\"><a href=\"#1-紧急处理\" class=\"headerlink\" title=\"1.紧急处理\"></a>1.紧急处理</h2><p>其实是在服务方解决问题之前让用户先稍微兼容一下。方案很简单：</p>\n<p>换个浏览器<br>or</p>\n<p>打开 chrome://flags/#same-site-by-default-cookies，关掉 SameSite by default cookies 然后重启浏览器</p>\n<h2 id=\"2-方法一：跨域-Set-Cookie\"><a href=\"#2-方法一：跨域-Set-Cookie\" class=\"headerlink\" title=\"2. 方法一：跨域 + Set-Cookie\"></a>2. 方法一：跨域 + Set-Cookie</h2><p>首先就是报错信息里提到的，让服务端同学在 Set-Cookie 的时候加上 SameSite=None; Secure。但是我们的后台系统都是对内使用的，很多域名都没有申请证书。而 “Secure” 属性却表示 Cookie 只能随 HTTPS 请求发送。<br>这就很尴尬。<br>要不申请证书，要不换域名。<br>但是长远来看，https是大趋势，趁着这个机会升级成 HTTPS 也是可取的。<br>然而有些版本的浏览器并不识别 SameSite=None，需要特殊处理。</p>\n<h2 id=\"3-方法二：改成同域请求\"><a href=\"#3-方法二：改成同域请求\" class=\"headerlink\" title=\"3. 方法二：改成同域请求\"></a>3. 方法二：改成同域请求</h2><p>既然 SameSite=Lax 限制的是跨域 Cookie 携带，那么改成同域自然没有问题了。<br>但因为现在项目都是前后端分离部署的，所以请运维同学配了一下匹配到 ^/api/ 开头的请求都转发到服务端的地址。前端请求接口时直接用相对路径请求。<br>问题解决</p>\n","categories":[{"name":"项目总结","path":"api/categories/项目总结.json"}],"tags":[{"name":"项目总结","path":"api/tags/项目总结.json"}]}