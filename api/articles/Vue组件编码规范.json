{"title":"Vue组件编码规范","slug":"Vue组件编码规范","date":"2019-08-13T13:45:12.000Z","updated":"2022-01-05T09:27:15.115Z","comments":true,"path":"api/articles/Vue组件编码规范.json","excerpt":null,"covers":null,"content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><blockquote>\n<p>本规范提供了一种统一的编码规范来编写 Vue.js 代码。这使得代码具有如下的特性：</p>\n</blockquote>\n<ul>\n<li>其它开发者或是团队成员更容易阅读和理解。</li>\n<li>IDEs 更容易理解代码，从而提供高亮、格式化等辅助功能</li>\n<li>更容易使用现有的工具</li>\n<li>更容易实现缓存以及代码包的分拆</li>\n</ul>\n<h1 id=\"基于模块开发\"><a href=\"#基于模块开发\" class=\"headerlink\" title=\"基于模块开发\"></a>基于模块开发</h1><p>始终基于模块的方式来构建你的 app，每一个子模块只做一件事情。</p>\n<p>Vue.js 的设计初衷就是帮助开发者更好的开发界面模块。一个模块是应用程序中独立的一个部分。</p>\n<h2 id=\"怎么做？\"><a href=\"#怎么做？\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><blockquote>\n<p>每一个 Vue 组件（等同于模块）首先必须专注于解决一个单一的问题，独立的、可复用的、微小的 和 可测试的。</p>\n</blockquote>\n<p>如果你的组件做了太多的事或是变得臃肿，请将其拆分成更小的组件并保持单一的原则。一般来说，尽量保证每一个文件的代码行数不要超过 100 行。也请保证组件可独立的运行。</p>\n<h1 id=\"vue-组件命名\"><a href=\"#vue-组件命名\" class=\"headerlink\" title=\"vue 组件命名\"></a>vue 组件命名</h1><p>组件的命名需遵从以下原则：</p>\n<ul>\n<li><p><strong>有意义的</strong>: 不过于具体，也不过于抽象</p>\n</li>\n<li><p><strong>简短</strong>: 2 到 3 个单词</p>\n</li>\n<li><p><strong>具有可读性</strong>: 以便于沟通交流<br>同时还需要注意：</p>\n</li>\n<li><p>必须符合<strong>自定义元素规范</strong>: 使用连字符分隔单词，切勿使用保留字。</p>\n</li>\n<li><p>app- 前缀作为命名空间:</p>\n</li>\n</ul>\n<p>如果非常通用的话可使用一个单词来命名，这样可以方便于其它项目里复用。</p>\n<h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>组件是通过组件名来调用的。所以组件名必须简短、富有含义并且具有可读性。</li>\n</ul>\n<h2 id=\"如何做？\"><a href=\"#如何做？\" class=\"headerlink\" title=\"如何做？\"></a>如何做？</h2><pre><code>!-- 推荐 --&gt;\n&lt;app-header&gt;&lt;/app-header&gt;\n&lt;user-list&gt;&lt;/user-list&gt;\n&lt;range-slider&gt;&lt;/range-slider&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;btn-group&gt;&lt;/btn-group&gt; &lt;!-- 虽然简短但是可读性差. 使用 `button-group` 替代 --&gt;\n&lt;ui-slider&gt;&lt;/ui-slider&gt; &lt;!-- ui 前缀太过于宽泛，在这里意义不明确 --&gt;\n&lt;slider&gt;&lt;/slider&gt; &lt;!-- 与自定义元素规范不兼容 --&gt;</code></pre>\n<h1 id=\"组件表达式简单化\"><a href=\"#组件表达式简单化\" class=\"headerlink\" title=\"组件表达式简单化\"></a>组件表达式简单化</h1><p>Vue.js 的表达式是 100% 的 Javascript 表达式。这使得其功能性很强大，但也带来潜在的复杂性。因此，你应该尽量保持表达式的简单化。</p>\n<h2 id=\"为什么？-1\"><a href=\"#为什么？-1\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>复杂的行内表达式难以阅读。</li>\n<li>行内表达式是不能够通用的，这可能会导致重复编码的问题。</li>\n<li>IDE 基本上不能识别行内表达式语法，所以使用行内表达式 IDE 不能提供自动补全和语法校验功能。</li>\n</ul>\n<h2 id=\"怎么做？-1\"><a href=\"#怎么做？-1\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>如果你发现写了太多复杂并难以阅读的行内表达式，那么可以使用 method 或是 computed 属性来替代其功能。</p>\n<pre><code>&lt;!-- 推荐 --&gt;\n&lt;template&gt;\n  &lt;h1&gt;\n    {{ `${year}-${month}` }}\n  &lt;/h1&gt;\n&lt;/template&gt;\n&lt;script type=\"text/javascript\"&gt;\n  export default {\n    computed: {\n      month() {\n        return this.twoDigits((new Date()).getUTCMonth() + 1);\n      },\n      year() {\n        return (new Date()).getUTCFullYear();\n      }\n    },\n    methods: {\n      twoDigits(num) {\n        return ('0' + num).slice(-2);\n      }\n    },\n  };\n&lt;/script&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;template&gt;\n  &lt;h1&gt;\n    {{ `${(new Date()).getUTCFullYear()}-${('0' + ((new Date()).getUTCMonth()+1)).slice(-2)}` }}\n  &lt;/h1&gt;\n&lt;/template&gt;</code></pre>\n<h1 id=\"组件-props-原子化\"><a href=\"#组件-props-原子化\" class=\"headerlink\" title=\"组件 props 原子化\"></a>组件 props 原子化</h1><p>虽然 Vue.js 支持传递复杂的 JavaScript 对象通过 props 属性，但是你应该尽可能的使用原始类型的数据。尽量只使用 JavaScript 原始类型（字符串、数字、布尔值）和函数。尽量避免复杂的对象。</p>\n<h2 id=\"为什么？-2\"><a href=\"#为什么？-2\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>使得组件 API 清晰直观。</li>\n<li>只使用原始类型和函数作为 props 使得组件的 API 更接近于 HTML(5) 原生元素。</li>\n<li>其它开发者更好的理解每一个 prop 的含义、作用。</li>\n<li>传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。</li>\n</ul>\n<h2 id=\"怎么做？-2\"><a href=\"#怎么做？-2\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>组件的每一个属性单独使用一个 props，并且使用函数或是原始类型的值。</p>\n<pre><code>&lt;!-- 推荐 --&gt;\n&lt;range-slider\n  :values=\"[10, 20]\"\n  :min=\"0\"\n  :max=\"100\"\n  :step=\"5\"\n  @on-slide=\"updateInputs\"\n  @on-end=\"updateResults\"&gt;\n&lt;/range-slider&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;range-slider :config=\"complexConfigObject\"&gt;&lt;/range-slider&gt;</code></pre>\n<h1 id=\"验证组件的-props\"><a href=\"#验证组件的-props\" class=\"headerlink\" title=\"验证组件的 props\"></a>验证组件的 props</h1><p>在 Vue.js 中，组件的 props 即 API，一个稳定并可预测的 API 会使得你的组件更容易被其他开发者使用。</p>\n<p>组件 props 通过自定义标签的属性来传递。属性的值可以是 Vue.js 字符串(:attr=”value” 或 v-bind:attr=”value”)或是不传。你需要保证组件的 props 能应对不同的情况。</p>\n<h2 id=\"为什么？-3\"><a href=\"#为什么？-3\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>验证组件 props 可以保证你的组件永远是可用的（防御性编程）。即使其他开发者并未按照你预想的方法使用时也不会出错。</p>\n<h2 id=\"怎么做？-3\"><a href=\"#怎么做？-3\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><ul>\n<li>提供默认值。</li>\n<li>使用 type 属性校验类型。</li>\n<li>使用 props 之前先检查该 prop 是否存在。</li>\n</ul>\n<pre><code>&lt;template&gt;\n  &lt;input type=\"range\" v-model=\"value\" :max=\"max\" :min=\"min\"&gt;\n&lt;/template&gt;\n&lt;script type=\"text/javascript\"&gt;\n  export default {\n    props: {\n      max: {\n        type: Number, // 这里添加了数字类型的校验\n        default() { return 10; },\n      },\n      min: {\n        type: Number,\n        default() { return 0; },\n      },\n      value: {\n        type: Number,\n        default() { return 4; },\n      },\n    },\n  };\n&lt;/script&gt;</code></pre>\n<h1 id=\"将-this-赋值给-component-变量\"><a href=\"#将-this-赋值给-component-变量\" class=\"headerlink\" title=\"将 this 赋值给 component 变量\"></a>将 this 赋值给 component 变量</h1><p>在 Vue.js 组件上下文中，this指向了组件实例。因此当你切换到了不同的上下文时，要确保 this 指向一个可用的 component 变量。</p>\n<p>换句话说，如果你正在使用 ES6 的话，就不要再编写 var self = this; 这样的代码了，您可以安全地使用 Vue 组件。</p>\n<h2 id=\"为什么？-4\"><a href=\"#为什么？-4\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>使用 ES6，就不再需要将 this 保存到一个变量中了。</li>\n<li>一般来说，当你使用箭头函数时，会保留 this 的作用域。（译者注：箭头函数没有它自己的 this 值，箭头函数内的 this 值继承自外围作用域。）</li>\n<li>如果你没有使用 ES6，当然也就不会使用 箭头函数 啦，那你必须将 “this” 保存到到某个变量中。这是唯一的例外。</li>\n</ul>\n<h2 id=\"怎么做？-4\"><a href=\"#怎么做？-4\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><pre><code>&lt;script type=\"text/javascript\"&gt;\nexport default {\n  methods: {\n    hello() {\n      return 'hello';\n    },\n    printHello() {\n      console.log(this.hello());\n    },\n  },\n};\n&lt;/script&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;script type=\"text/javascript\"&gt;\nexport default {\n  methods: {\n    hello() {\n      return 'hello';\n    },\n    printHello() {\n      const self = this; // 没有必要\n      console.log(self.hello());\n    },\n  },\n};\n&lt;/script&gt;</code></pre>\n<h1 id=\"组件结构化\"><a href=\"#组件结构化\" class=\"headerlink\" title=\"组件结构化\"></a>组件结构化</h1><p>按照一定的结构组织，使得组件便于理解。</p>\n<h2 id=\"为什么？-5\"><a href=\"#为什么？-5\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>导出一个清晰、组织有序的组件，使得代码易于阅读和理解。同时也便于标准化。</li>\n<li>按首字母排序 properties、data、computed、watches 和 methods 使得这些对象内的属性便于查找。</li>\n<li>合理组织，使得组件易于阅读。（name; extends; props, data 和 computed; components; watch 和 methods; lifecycle methods 等）。</li>\n<li>使用 name 属性。借助于 vue devtools 可以让你更方便的测试。</li>\n<li>合理的 CSS 结构，如 BEM 或 rscss - 详情？。</li>\n<li>使用单文件 .vue 文件格式来组件代码。</li>\n</ul>\n<h2 id=\"怎么做？-5\"><a href=\"#怎么做？-5\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>组件结构化</p>\n<pre><code>&lt;template lang=\"html\"&gt;\n  &lt;div class=\"Ranger__Wrapper\"&gt;\n    &lt;!-- ... --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n  export default {\n    // 不要忘记了 name 属性\n    name: 'RangeSlider',\n    // 使用组件 mixins 共享通用功能\n    mixins: [],\n    // 组成新的组件\n    extends: {},\n    // 组件属性、变量\n    props: {\n      bar: {}, // 按字母顺序\n      foo: {},\n      fooBar: {},\n    },\n    // 变量\n    data() {},\n    computed: {},\n    // 使用其它组件\n    components: {},\n    // 方法\n    watch: {},\n    methods: {},\n    // 生命周期函数\n    beforeCreate() {},\n    mounted() {},\n  };\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n  .Ranger__Wrapper { /* ... */ }\n&lt;/style&gt;</code></pre>\n<h1 id=\"避免-this-parent\"><a href=\"#避免-this-parent\" class=\"headerlink\" title=\"避免 this.$parent\"></a>避免 this.$parent</h1><p>Vue.js 支持组件嵌套，并且子组件可访问父组件的上下文。访问组件之外的上下文违反了基于模块开发的第一原则。因此你应该尽量避免使用 this.$parent。</p>\n<h2 id=\"为什么？-6\"><a href=\"#为什么？-6\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>组件必须相互保持独立，Vue 组件也是。如果组件需要访问其父层的上下文就违反了该原则。</li>\n<li>如果一个组件需要访问其父组件的上下文，那么该组件将不能在其它上下文中复用。</li>\n</ul>\n<h2 id=\"怎么做？-6\"><a href=\"#怎么做？-6\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><ul>\n<li>通过 props 将值传递给子组件。</li>\n<li>通过 props 传递回调函数给子组件来达到调用父组件方法的目的。</li>\n<li>通过在子组件触发事件来通知父组件。</li>\n</ul>\n<h1 id=\"谨慎使用-this-refs\"><a href=\"#谨慎使用-this-refs\" class=\"headerlink\" title=\"谨慎使用 this.$refs\"></a>谨慎使用 this.$refs</h1><p>Vue.js 支持通过 ref 属性来访问其它组件和 HTML 元素。并通过 this.$refs 可以得到组件或 HTML 元素的上下文。在大多数情况下，通过 this.$refs来访问其它组件的上下文是可以避免的。在使用的的时候你需要注意避免调用了不恰当的组件 API，所以应该尽量避免使用 this.$refs。</p>\n<h2 id=\"为什么？-7\"><a href=\"#为什么？-7\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>组件必须是保持独立的，如果一个组件的 API 不能够提供所需的功能，那么这个组件在设计、实现上是有问题的。</li>\n<li>组件的属性和事件必须足够的给大多数的组件使用。</li>\n</ul>\n<h2 id=\"怎么做？-7\"><a href=\"#怎么做？-7\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><ul>\n<li>提供良好的组件 API。</li>\n<li>总是关注于组件本身的目的。</li>\n<li>拒绝定制代码。如果你在一个通用的组件内部编写特定需求的代码，那么代表这个组件的 API 不够通用，或者你可能需要一个新的组件来应对该需求。</li>\n<li>检查所有的 props 是否有缺失的，如果有提一个 issue 或是完善这个组件。</li>\n<li>检查所有的事件。子组件向父组件通信一般是通过事件来实现的，但是大多数的开发者更多的关注于 props 从忽视了这点。</li>\n<li>Props向下传递，事件向上传递！。以此为目标升级你的组件，提供良好的 API 和 独立性。</li>\n<li>当遇到 props 和 events 难以实现的功能时，通过 this.$refs来实现。</li>\n<li>当需要操作 DOM 无法通过指令来做的时候可使用 this.$ref 而不是 JQuery、document.getElement*、document.queryElement。</li>\n</ul>\n<pre><code>&lt;!-- 推荐，并未使用 this.$refs --&gt;\n&lt;range :max=\"max\"\n  :min=\"min\"\n  @current-value=\"currentValue\"\n  :step=\"1\"&gt;&lt;/range&gt;</code></pre>\n<pre><code>&lt;!-- 使用 this.$refs 的适用情况--&gt;\n&lt;modal ref=\"basicModal\"&gt;\n  &lt;h4&gt;Basic Modal&lt;/h4&gt;\n  &lt;button class=\"primary\" @click=\"$refs.basicModal.hide()\"&gt;Close&lt;/button&gt;\n&lt;/modal&gt;\n&lt;button @click=\"$refs.basicModal.open()\"&gt;Open modal&lt;/button&gt;\n\n&lt;!-- Modal component --&gt;\n&lt;template&gt;\n  &lt;div v-show=\"active\"&gt;\n    &lt;!-- ... --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    // ...\n    data() {\n      return {\n        active: false,\n      };\n    },\n    methods: {\n      open() {\n        this.active = true;\n      },\n      hide() {\n        this.active = false;\n      },\n    },\n    // ...\n  };\n&lt;/script&gt;</code></pre>\n<pre><code>&lt;!-- 如果可通过 emited 来做则避免通过 this.$refs 直接访问 --&gt;\n&lt;template&gt;\n  &lt;range :max=\"max\"\n    :min=\"min\"\n    ref=\"range\"\n    :step=\"1\"&gt;&lt;/range&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    // ...\n    methods: {\n      getRangeCurrentValue() {\n        return this.$refs.range.currentValue;\n      },\n    },\n    // ...\n  };\n&lt;/script&gt;</code></pre>\n<h1 id=\"使用组件名作为样式作用域空间\"><a href=\"#使用组件名作为样式作用域空间\" class=\"headerlink\" title=\"使用组件名作为样式作用域空间\"></a>使用组件名作为样式作用域空间</h1><p>Vue.js 的组件是自定义元素，这非常适合用来作为样式的根作用域空间。可以将组件名作为 CSS 类的命名空间。</p>\n<h2 id=\"为什么？-8\"><a href=\"#为什么？-8\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>给样式加上作用域空间可以避免组件样式影响外部的样式。</li>\n<li>保持模块名、目录名、样式根作用域名一样，可以很好的将其关联起来，便于开发者理解。</li>\n</ul>\n<h2 id=\"怎么做？-8\"><a href=\"#怎么做？-8\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>使用组件名作为样式命名的前缀，可基于 BEM 或 OOCSS 范式。同时给 style 标签加上 scoped 属性。加上 scoped 属性编译后会给组件的 class 自动加上唯一的前缀从而避免样式的冲突。</p>\n<pre><code>&lt;style scoped&gt;\n  /* 推荐 */\n  .MyExample { }\n  .MyExample li { }\n  .MyExample__item { }\n\n  /* 避免 */\n  .My-Example { } /* 没有用组件名或模块名限制作用域, 不符合 BEM 规范 */\n&lt;/style&gt;</code></pre>\n<h1 id=\"尽可能使用-mixins\"><a href=\"#尽可能使用-mixins\" class=\"headerlink\" title=\"尽可能使用 mixins\"></a>尽可能使用 mixins</h1><h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么?\"></a>为什么?</h2><p>Mixins 封装可重用的代码，避免了重复。如果两个组件共享有相同的功能，则可以使用 mixin。通过 mixin，你可以专注于单个组件的任务和抽象的通用代码。这有助于更好地维护你的应用程序。</p>\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h2><p>假设你有一个移动端和桌面端的菜单组件，它们共享一些功能。我们可以抽象出这两个组件的核心功能到一个 mixin 中，例如：</p>\n<pre><code>const MenuMixin = {\n  data () {\n    return {\n      language: 'EN'\n    }\n  },\n\n  methods: {\n    changeLanguage () {\n      if (this.language === 'DE') this.$set(this, 'language', 'EN')\n      if (this.language === 'EN') this.$set(this, 'language', 'DE')\n    }\n  }\n}\n\nexport default MenuMixin</code></pre>\n<p>要使用 mixin，只需将其导入到两个组件中（我只展示移动组件）。</p>\n<pre><code>&lt;template&gt;\n  &lt;ul class=\"mobile\"&gt;\n    &lt;li @click=\"changeLanguage\"&gt;Change language&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import MenuMixin from './MenuMixin'\n\n  export default {\n    mixins: [MenuMixin]\n  }\n&lt;/script&gt;</code></pre>\n","more":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><blockquote>\n<p>本规范提供了一种统一的编码规范来编写 Vue.js 代码。这使得代码具有如下的特性：</p>\n</blockquote>\n<ul>\n<li>其它开发者或是团队成员更容易阅读和理解。</li>\n<li>IDEs 更容易理解代码，从而提供高亮、格式化等辅助功能</li>\n<li>更容易使用现有的工具</li>\n<li>更容易实现缓存以及代码包的分拆</li>\n</ul>\n<h1 id=\"基于模块开发\"><a href=\"#基于模块开发\" class=\"headerlink\" title=\"基于模块开发\"></a>基于模块开发</h1><p>始终基于模块的方式来构建你的 app，每一个子模块只做一件事情。</p>\n<p>Vue.js 的设计初衷就是帮助开发者更好的开发界面模块。一个模块是应用程序中独立的一个部分。</p>\n<h2 id=\"怎么做？\"><a href=\"#怎么做？\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><blockquote>\n<p>每一个 Vue 组件（等同于模块）首先必须专注于解决一个单一的问题，独立的、可复用的、微小的 和 可测试的。</p>\n</blockquote>\n<p>如果你的组件做了太多的事或是变得臃肿，请将其拆分成更小的组件并保持单一的原则。一般来说，尽量保证每一个文件的代码行数不要超过 100 行。也请保证组件可独立的运行。</p>\n<h1 id=\"vue-组件命名\"><a href=\"#vue-组件命名\" class=\"headerlink\" title=\"vue 组件命名\"></a>vue 组件命名</h1><p>组件的命名需遵从以下原则：</p>\n<ul>\n<li><p><strong>有意义的</strong>: 不过于具体，也不过于抽象</p>\n</li>\n<li><p><strong>简短</strong>: 2 到 3 个单词</p>\n</li>\n<li><p><strong>具有可读性</strong>: 以便于沟通交流<br>同时还需要注意：</p>\n</li>\n<li><p>必须符合<strong>自定义元素规范</strong>: 使用连字符分隔单词，切勿使用保留字。</p>\n</li>\n<li><p>app- 前缀作为命名空间:</p>\n</li>\n</ul>\n<p>如果非常通用的话可使用一个单词来命名，这样可以方便于其它项目里复用。</p>\n<h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>组件是通过组件名来调用的。所以组件名必须简短、富有含义并且具有可读性。</li>\n</ul>\n<h2 id=\"如何做？\"><a href=\"#如何做？\" class=\"headerlink\" title=\"如何做？\"></a>如何做？</h2><pre><code>!-- 推荐 --&gt;\n&lt;app-header&gt;&lt;/app-header&gt;\n&lt;user-list&gt;&lt;/user-list&gt;\n&lt;range-slider&gt;&lt;/range-slider&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;btn-group&gt;&lt;/btn-group&gt; &lt;!-- 虽然简短但是可读性差. 使用 `button-group` 替代 --&gt;\n&lt;ui-slider&gt;&lt;/ui-slider&gt; &lt;!-- ui 前缀太过于宽泛，在这里意义不明确 --&gt;\n&lt;slider&gt;&lt;/slider&gt; &lt;!-- 与自定义元素规范不兼容 --&gt;</code></pre>\n<h1 id=\"组件表达式简单化\"><a href=\"#组件表达式简单化\" class=\"headerlink\" title=\"组件表达式简单化\"></a>组件表达式简单化</h1><p>Vue.js 的表达式是 100% 的 Javascript 表达式。这使得其功能性很强大，但也带来潜在的复杂性。因此，你应该尽量保持表达式的简单化。</p>\n<h2 id=\"为什么？-1\"><a href=\"#为什么？-1\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>复杂的行内表达式难以阅读。</li>\n<li>行内表达式是不能够通用的，这可能会导致重复编码的问题。</li>\n<li>IDE 基本上不能识别行内表达式语法，所以使用行内表达式 IDE 不能提供自动补全和语法校验功能。</li>\n</ul>\n<h2 id=\"怎么做？-1\"><a href=\"#怎么做？-1\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>如果你发现写了太多复杂并难以阅读的行内表达式，那么可以使用 method 或是 computed 属性来替代其功能。</p>\n<pre><code>&lt;!-- 推荐 --&gt;\n&lt;template&gt;\n  &lt;h1&gt;\n    &#123;&#123; `$&#123;year&#125;-$&#123;month&#125;` &#125;&#125;\n  &lt;/h1&gt;\n&lt;/template&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  export default &#123;\n    computed: &#123;\n      month() &#123;\n        return this.twoDigits((new Date()).getUTCMonth() + 1);\n      &#125;,\n      year() &#123;\n        return (new Date()).getUTCFullYear();\n      &#125;\n    &#125;,\n    methods: &#123;\n      twoDigits(num) &#123;\n        return (&#39;0&#39; + num).slice(-2);\n      &#125;\n    &#125;,\n  &#125;;\n&lt;/script&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;template&gt;\n  &lt;h1&gt;\n    &#123;&#123; `$&#123;(new Date()).getUTCFullYear()&#125;-$&#123;('0' + ((new Date()).getUTCMonth()+1)).slice(-2)&#125;` &#125;&#125;\n  &lt;/h1&gt;\n&lt;/template&gt;</code></pre>\n<h1 id=\"组件-props-原子化\"><a href=\"#组件-props-原子化\" class=\"headerlink\" title=\"组件 props 原子化\"></a>组件 props 原子化</h1><p>虽然 Vue.js 支持传递复杂的 JavaScript 对象通过 props 属性，但是你应该尽可能的使用原始类型的数据。尽量只使用 JavaScript 原始类型（字符串、数字、布尔值）和函数。尽量避免复杂的对象。</p>\n<h2 id=\"为什么？-2\"><a href=\"#为什么？-2\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>使得组件 API 清晰直观。</li>\n<li>只使用原始类型和函数作为 props 使得组件的 API 更接近于 HTML(5) 原生元素。</li>\n<li>其它开发者更好的理解每一个 prop 的含义、作用。</li>\n<li>传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。</li>\n</ul>\n<h2 id=\"怎么做？-2\"><a href=\"#怎么做？-2\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>组件的每一个属性单独使用一个 props，并且使用函数或是原始类型的值。</p>\n<pre><code>&lt;!-- 推荐 --&gt;\n&lt;range-slider\n  :values=&quot;[10, 20]&quot;\n  :min=&quot;0&quot;\n  :max=&quot;100&quot;\n  :step=&quot;5&quot;\n  @on-slide=&quot;updateInputs&quot;\n  @on-end=&quot;updateResults&quot;&gt;\n&lt;/range-slider&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;range-slider :config=&quot;complexConfigObject&quot;&gt;&lt;/range-slider&gt;</code></pre>\n<h1 id=\"验证组件的-props\"><a href=\"#验证组件的-props\" class=\"headerlink\" title=\"验证组件的 props\"></a>验证组件的 props</h1><p>在 Vue.js 中，组件的 props 即 API，一个稳定并可预测的 API 会使得你的组件更容易被其他开发者使用。</p>\n<p>组件 props 通过自定义标签的属性来传递。属性的值可以是 Vue.js 字符串(:attr=”value” 或 v-bind:attr=”value”)或是不传。你需要保证组件的 props 能应对不同的情况。</p>\n<h2 id=\"为什么？-3\"><a href=\"#为什么？-3\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>验证组件 props 可以保证你的组件永远是可用的（防御性编程）。即使其他开发者并未按照你预想的方法使用时也不会出错。</p>\n<h2 id=\"怎么做？-3\"><a href=\"#怎么做？-3\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><ul>\n<li>提供默认值。</li>\n<li>使用 type 属性校验类型。</li>\n<li>使用 props 之前先检查该 prop 是否存在。</li>\n</ul>\n<pre><code>&lt;template&gt;\n  &lt;input type=&quot;range&quot; v-model=&quot;value&quot; :max=&quot;max&quot; :min=&quot;min&quot;&gt;\n&lt;/template&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  export default &#123;\n    props: &#123;\n      max: &#123;\n        type: Number, // 这里添加了数字类型的校验\n        default() &#123; return 10; &#125;,\n      &#125;,\n      min: &#123;\n        type: Number,\n        default() &#123; return 0; &#125;,\n      &#125;,\n      value: &#123;\n        type: Number,\n        default() &#123; return 4; &#125;,\n      &#125;,\n    &#125;,\n  &#125;;\n&lt;/script&gt;</code></pre>\n<h1 id=\"将-this-赋值给-component-变量\"><a href=\"#将-this-赋值给-component-变量\" class=\"headerlink\" title=\"将 this 赋值给 component 变量\"></a>将 this 赋值给 component 变量</h1><p>在 Vue.js 组件上下文中，this指向了组件实例。因此当你切换到了不同的上下文时，要确保 this 指向一个可用的 component 变量。</p>\n<p>换句话说，如果你正在使用 ES6 的话，就不要再编写 var self = this; 这样的代码了，您可以安全地使用 Vue 组件。</p>\n<h2 id=\"为什么？-4\"><a href=\"#为什么？-4\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>使用 ES6，就不再需要将 this 保存到一个变量中了。</li>\n<li>一般来说，当你使用箭头函数时，会保留 this 的作用域。（译者注：箭头函数没有它自己的 this 值，箭头函数内的 this 值继承自外围作用域。）</li>\n<li>如果你没有使用 ES6，当然也就不会使用 箭头函数 啦，那你必须将 “this” 保存到到某个变量中。这是唯一的例外。</li>\n</ul>\n<h2 id=\"怎么做？-4\"><a href=\"#怎么做？-4\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nexport default &#123;\n  methods: &#123;\n    hello() &#123;\n      return &#39;hello&#39;;\n    &#125;,\n    printHello() &#123;\n      console.log(this.hello());\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;!-- 避免 --&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nexport default &#123;\n  methods: &#123;\n    hello() &#123;\n      return &#39;hello&#39;;\n    &#125;,\n    printHello() &#123;\n      const self = this; // 没有必要\n      console.log(self.hello());\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;</code></pre>\n<h1 id=\"组件结构化\"><a href=\"#组件结构化\" class=\"headerlink\" title=\"组件结构化\"></a>组件结构化</h1><p>按照一定的结构组织，使得组件便于理解。</p>\n<h2 id=\"为什么？-5\"><a href=\"#为什么？-5\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>导出一个清晰、组织有序的组件，使得代码易于阅读和理解。同时也便于标准化。</li>\n<li>按首字母排序 properties、data、computed、watches 和 methods 使得这些对象内的属性便于查找。</li>\n<li>合理组织，使得组件易于阅读。（name; extends; props, data 和 computed; components; watch 和 methods; lifecycle methods 等）。</li>\n<li>使用 name 属性。借助于 vue devtools 可以让你更方便的测试。</li>\n<li>合理的 CSS 结构，如 BEM 或 rscss - 详情？。</li>\n<li>使用单文件 .vue 文件格式来组件代码。</li>\n</ul>\n<h2 id=\"怎么做？-5\"><a href=\"#怎么做？-5\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>组件结构化</p>\n<pre><code>&lt;template lang=&quot;html&quot;&gt;\n  &lt;div class=&quot;Ranger__Wrapper&quot;&gt;\n    &lt;!-- ... --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n  export default &#123;\n    // 不要忘记了 name 属性\n    name: &#39;RangeSlider&#39;,\n    // 使用组件 mixins 共享通用功能\n    mixins: [],\n    // 组成新的组件\n    extends: &#123;&#125;,\n    // 组件属性、变量\n    props: &#123;\n      bar: &#123;&#125;, // 按字母顺序\n      foo: &#123;&#125;,\n      fooBar: &#123;&#125;,\n    &#125;,\n    // 变量\n    data() &#123;&#125;,\n    computed: &#123;&#125;,\n    // 使用其它组件\n    components: &#123;&#125;,\n    // 方法\n    watch: &#123;&#125;,\n    methods: &#123;&#125;,\n    // 生命周期函数\n    beforeCreate() &#123;&#125;,\n    mounted() &#123;&#125;,\n  &#125;;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n  .Ranger__Wrapper &#123; /* ... */ &#125;\n&lt;/style&gt;</code></pre>\n<h1 id=\"避免-this-parent\"><a href=\"#避免-this-parent\" class=\"headerlink\" title=\"避免 this.$parent\"></a>避免 this.$parent</h1><p>Vue.js 支持组件嵌套，并且子组件可访问父组件的上下文。访问组件之外的上下文违反了基于模块开发的第一原则。因此你应该尽量避免使用 this.$parent。</p>\n<h2 id=\"为什么？-6\"><a href=\"#为什么？-6\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>组件必须相互保持独立，Vue 组件也是。如果组件需要访问其父层的上下文就违反了该原则。</li>\n<li>如果一个组件需要访问其父组件的上下文，那么该组件将不能在其它上下文中复用。</li>\n</ul>\n<h2 id=\"怎么做？-6\"><a href=\"#怎么做？-6\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><ul>\n<li>通过 props 将值传递给子组件。</li>\n<li>通过 props 传递回调函数给子组件来达到调用父组件方法的目的。</li>\n<li>通过在子组件触发事件来通知父组件。</li>\n</ul>\n<h1 id=\"谨慎使用-this-refs\"><a href=\"#谨慎使用-this-refs\" class=\"headerlink\" title=\"谨慎使用 this.$refs\"></a>谨慎使用 this.$refs</h1><p>Vue.js 支持通过 ref 属性来访问其它组件和 HTML 元素。并通过 this.$refs 可以得到组件或 HTML 元素的上下文。在大多数情况下，通过 this.$refs来访问其它组件的上下文是可以避免的。在使用的的时候你需要注意避免调用了不恰当的组件 API，所以应该尽量避免使用 this.$refs。</p>\n<h2 id=\"为什么？-7\"><a href=\"#为什么？-7\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>组件必须是保持独立的，如果一个组件的 API 不能够提供所需的功能，那么这个组件在设计、实现上是有问题的。</li>\n<li>组件的属性和事件必须足够的给大多数的组件使用。</li>\n</ul>\n<h2 id=\"怎么做？-7\"><a href=\"#怎么做？-7\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><ul>\n<li>提供良好的组件 API。</li>\n<li>总是关注于组件本身的目的。</li>\n<li>拒绝定制代码。如果你在一个通用的组件内部编写特定需求的代码，那么代表这个组件的 API 不够通用，或者你可能需要一个新的组件来应对该需求。</li>\n<li>检查所有的 props 是否有缺失的，如果有提一个 issue 或是完善这个组件。</li>\n<li>检查所有的事件。子组件向父组件通信一般是通过事件来实现的，但是大多数的开发者更多的关注于 props 从忽视了这点。</li>\n<li>Props向下传递，事件向上传递！。以此为目标升级你的组件，提供良好的 API 和 独立性。</li>\n<li>当遇到 props 和 events 难以实现的功能时，通过 this.$refs来实现。</li>\n<li>当需要操作 DOM 无法通过指令来做的时候可使用 this.$ref 而不是 JQuery、document.getElement*、document.queryElement。</li>\n</ul>\n<pre><code>&lt;!-- 推荐，并未使用 this.$refs --&gt;\n&lt;range :max=&quot;max&quot;\n  :min=&quot;min&quot;\n  @current-value=&quot;currentValue&quot;\n  :step=&quot;1&quot;&gt;&lt;/range&gt;</code></pre>\n<pre><code>&lt;!-- 使用 this.$refs 的适用情况--&gt;\n&lt;modal ref=&quot;basicModal&quot;&gt;\n  &lt;h4&gt;Basic Modal&lt;/h4&gt;\n  &lt;button class=&quot;primary&quot; @click=&quot;$refs.basicModal.hide()&quot;&gt;Close&lt;/button&gt;\n&lt;/modal&gt;\n&lt;button @click=&quot;$refs.basicModal.open()&quot;&gt;Open modal&lt;/button&gt;\n\n&lt;!-- Modal component --&gt;\n&lt;template&gt;\n  &lt;div v-show=&quot;active&quot;&gt;\n    &lt;!-- ... --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default &#123;\n    // ...\n    data() &#123;\n      return &#123;\n        active: false,\n      &#125;;\n    &#125;,\n    methods: &#123;\n      open() &#123;\n        this.active = true;\n      &#125;,\n      hide() &#123;\n        this.active = false;\n      &#125;,\n    &#125;,\n    // ...\n  &#125;;\n&lt;/script&gt;</code></pre>\n<pre><code>&lt;!-- 如果可通过 emited 来做则避免通过 this.$refs 直接访问 --&gt;\n&lt;template&gt;\n  &lt;range :max=&quot;max&quot;\n    :min=&quot;min&quot;\n    ref=&quot;range&quot;\n    :step=&quot;1&quot;&gt;&lt;/range&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default &#123;\n    // ...\n    methods: &#123;\n      getRangeCurrentValue() &#123;\n        return this.$refs.range.currentValue;\n      &#125;,\n    &#125;,\n    // ...\n  &#125;;\n&lt;/script&gt;</code></pre>\n<h1 id=\"使用组件名作为样式作用域空间\"><a href=\"#使用组件名作为样式作用域空间\" class=\"headerlink\" title=\"使用组件名作为样式作用域空间\"></a>使用组件名作为样式作用域空间</h1><p>Vue.js 的组件是自定义元素，这非常适合用来作为样式的根作用域空间。可以将组件名作为 CSS 类的命名空间。</p>\n<h2 id=\"为什么？-8\"><a href=\"#为什么？-8\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><ul>\n<li>给样式加上作用域空间可以避免组件样式影响外部的样式。</li>\n<li>保持模块名、目录名、样式根作用域名一样，可以很好的将其关联起来，便于开发者理解。</li>\n</ul>\n<h2 id=\"怎么做？-8\"><a href=\"#怎么做？-8\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><p>使用组件名作为样式命名的前缀，可基于 BEM 或 OOCSS 范式。同时给 style 标签加上 scoped 属性。加上 scoped 属性编译后会给组件的 class 自动加上唯一的前缀从而避免样式的冲突。</p>\n<pre><code>&lt;style scoped&gt;\n  /* 推荐 */\n  .MyExample &#123; &#125;\n  .MyExample li &#123; &#125;\n  .MyExample__item &#123; &#125;\n\n  /* 避免 */\n  .My-Example &#123; &#125; /* 没有用组件名或模块名限制作用域, 不符合 BEM 规范 */\n&lt;/style&gt;</code></pre>\n<h1 id=\"尽可能使用-mixins\"><a href=\"#尽可能使用-mixins\" class=\"headerlink\" title=\"尽可能使用 mixins\"></a>尽可能使用 mixins</h1><h2 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么?\"></a>为什么?</h2><p>Mixins 封装可重用的代码，避免了重复。如果两个组件共享有相同的功能，则可以使用 mixin。通过 mixin，你可以专注于单个组件的任务和抽象的通用代码。这有助于更好地维护你的应用程序。</p>\n<h2 id=\"怎么做\"><a href=\"#怎么做\" class=\"headerlink\" title=\"怎么做?\"></a>怎么做?</h2><p>假设你有一个移动端和桌面端的菜单组件，它们共享一些功能。我们可以抽象出这两个组件的核心功能到一个 mixin 中，例如：</p>\n<pre><code>const MenuMixin = &#123;\n  data () &#123;\n    return &#123;\n      language: &#39;EN&#39;\n    &#125;\n  &#125;,\n\n  methods: &#123;\n    changeLanguage () &#123;\n      if (this.language === &#39;DE&#39;) this.$set(this, &#39;language&#39;, &#39;EN&#39;)\n      if (this.language === &#39;EN&#39;) this.$set(this, &#39;language&#39;, &#39;DE&#39;)\n    &#125;\n  &#125;\n&#125;\n\nexport default MenuMixin</code></pre>\n<p>要使用 mixin，只需将其导入到两个组件中（我只展示移动组件）。</p>\n<pre><code>&lt;template&gt;\n  &lt;ul class=&quot;mobile&quot;&gt;\n    &lt;li @click=&quot;changeLanguage&quot;&gt;Change language&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import MenuMixin from &#39;./MenuMixin&#39;\n\n  export default &#123;\n    mixins: [MenuMixin]\n  &#125;\n&lt;/script&gt;</code></pre>\n","categories":[{"name":"VUE专题","path":"api/categories/VUE专题.json"}],"tags":[{"name":"前端规范","path":"api/tags/前端规范.json"},{"name":"vue","path":"api/tags/vue.json"}]}