{"title":"前端常见的代码问题汇总","slug":"前端常见的代码问题汇总","date":"2022-01-05T07:50:27.000Z","updated":"2022-01-05T09:25:23.365Z","comments":true,"path":"api/articles/前端常见的代码问题汇总.json","excerpt":null,"covers":null,"content":"<p>代码评审中，经常发现小组成员使用”古老”的 es 语法，造成代码冗余臃肿，不够幽雅，特此总结下，也提醒自己不断总结，坚持学习！</p>\n<h1 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h1><p>从 obj 中取值，经常有人喜欢用对象的点语法：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  d<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  e<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span></code></pre>\n<p><strong>改进</strong><br>用 ES6 的解构赋值</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> e<span class=\"token punctuation\">;</span></code></pre>\n<p>另外，如果对象的属性值跟自己创建的对象名不一致，可以这样写：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> a1 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1</span></code></pre>\n<p><strong>注意</strong><br>ES6 的解构赋值虽然好用。但是要注意解构的对象不能为 undefined、null。否则会报错，故要给被解构的对象一个默认值。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"合并数据\"><a href=\"#合并数据\" class=\"headerlink\" title=\"合并数据\"></a>合并数据</h1><p>比如合并两个数组，合并两个对象。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[1,2,3,1,5,6]</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//{a:1,b:1}</span></code></pre>\n<p><strong>改进</strong><br>利用 ES6 扩展运算改进后：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//[1,2,3,5,6]</span>\n\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//{a:1,b:1}</span></code></pre>\n<h1 id=\"拼接字符串\"><a href=\"#拼接字符串\" class=\"headerlink\" title=\"拼接字符串\"></a>拼接字符串</h1><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> score <span class=\"token operator\">=</span> <span class=\"token number\">59</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">的考试成绩及格`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">的考试成绩不及格`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>改进</strong></p>\n<p>ES6 字符串模板在${}中可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> score <span class=\"token operator\">=</span> <span class=\"token number\">59</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>score <span class=\"token operator\">></span> <span class=\"token number\">60</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"的考试成绩及格\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"的考试成绩不及格\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h1><p>经常看到这样的写法：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>\n    type <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span>\n    type <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span>\n    type <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span>\n    type <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>改进</strong><br>includes 方法返回一个布尔值，表示某个数组是否包含给定的值,可以简化上面的写法：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> condition <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h1 id=\"扁平化数组\"><a href=\"#扁平化数组\" class=\"headerlink\" title=\"扁平化数组\"></a>扁平化数组</h1><p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  采购部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  人事部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  行政部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  运输部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> member <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> deps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> deps<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    member <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>member<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmember <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>改进</strong></p>\n<p>利用<code>Object.values</code>获取对象的全部属性，然后 ES6 提供的<code>flat</code>方法来扁平化：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  采购部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  人事部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  行政部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  运输部<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> member <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"获取对象属性\"><a href=\"#获取对象属性\" class=\"headerlink\" title=\"获取对象属性\"></a>获取对象属性</h1><p>业务代码中经常会遇到这样的情况，a对象有个属性b,b 也是一个对象有个属性 c,我们需要访问 c，经常会写成 a.b.c，但是如果 f 不存在时，就会出错。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>a<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token punctuation\">{</span>\n<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>b<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token punctuation\">{</span>\n<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>c<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//&amp;nbsp;123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//&amp;nbsp;f不存在所以会报错</span>\n</code></pre>\n<p><strong>改进</strong><br><code>可选链运算符</code>解决该问题，通过在.之前添加一个?将键名变成可选</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>person<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>profile<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//&amp;nbsp;18</span>\n</code></pre>\n<h1 id=\"空值判断\"><a href=\"#空值判断\" class=\"headerlink\" title=\"空值判断\"></a>空值判断</h1><p>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!==</span> undefined <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>改进</strong><br><code>空值合并运算符</code>与<code>||运算</code>很像，但是可以省略很多代码，可读性也增强。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>注意</strong><br>假设变量a不存在，我们希望给系统一个默认值，一般我们会使用||运算符。但是在javascript中空字符串，0，false都会执行||运算符，所以ECMAScript2020引入合并空运算符解决该问题，只允许在值为null或未定义时使用默认值。</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>name<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">||</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token string\">'yd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//&amp;nbsp;yd;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token string\">'yd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//&amp;nbsp;'';</span>\n</code></pre>\n","more":"<p>代码评审中，经常发现小组成员使用”古老”的 es 语法，造成代码冗余臃肿，不够幽雅，特此总结下，也提醒自己不断总结，坚持学习！</p>\n<h1 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h1><p>从 obj 中取值，经常有人喜欢用对象的点语法：</p>\n<pre><code class=\"js\">const obj = &#123;\n  a: 1,\n  b: 2,\n  c: 3,\n  d: 4,\n  e: 5,\n&#125;;\n\nconst a = obj.a;\nconst b = obj.b;\nconst c = obj.c;\nconst d = obj.d;\nconst e = obj.e;</code></pre>\n<p><strong>改进</strong><br>用 ES6 的解构赋值</p>\n<pre><code class=\"js\">const &#123; a, b, c, d, e &#125; = obj;\nconst f = a + d;\nconst g = c + e;</code></pre>\n<p>另外，如果对象的属性值跟自己创建的对象名不一致，可以这样写：</p>\n<pre><code class=\"js\">const &#123; a: a1 &#125; = obj;\nconsole.log(a1); // 1</code></pre>\n<p><strong>注意</strong><br>ES6 的解构赋值虽然好用。但是要注意解构的对象不能为 undefined、null。否则会报错，故要给被解构的对象一个默认值。</p>\n<pre><code class=\"js\">const &#123; a, b, c, d, e &#125; = obj || &#123;&#125;;</code></pre>\n<h1 id=\"合并数据\"><a href=\"#合并数据\" class=\"headerlink\" title=\"合并数据\"></a>合并数据</h1><p>比如合并两个数组，合并两个对象。</p>\n<pre><code class=\"js\">const a = [1, 2, 3];\nconst b = [1, 5, 6];\nconst c = a.concat(b); //[1,2,3,1,5,6]\n\nconst obj1 = &#123;\n  a: 1,\n&#125;;\nconst obj2 = &#123;\n  b: 1,\n&#125;;\nconst obj = Object.assign(&#123;&#125;, obj1, obj2); //&#123;a:1,b:1&#125;</code></pre>\n<p><strong>改进</strong><br>利用 ES6 扩展运算改进后：</p>\n<pre><code class=\"js\">const a = [1, 2, 3];\nconst b = [1, 5, 6];\nconst c = [...new Set([...a, ...b])]; //[1,2,3,5,6]\n\nconst obj1 = &#123;\n  a: 1,\n&#125;;\nconst obj2 = &#123;\n  b: 1,\n&#125;;\nconst obj = &#123; ...obj1, ...obj2 &#125;; //&#123;a:1,b:1&#125;</code></pre>\n<h1 id=\"拼接字符串\"><a href=\"#拼接字符串\" class=\"headerlink\" title=\"拼接字符串\"></a>拼接字符串</h1><pre><code class=\"js\">const name = &quot;小明&quot;;\nconst score = 59;\nlet result = &quot;&quot;;\nif (score &gt; 60) &#123;\n  result = `$&#123;name&#125;的考试成绩及格`;\n&#125; else &#123;\n  result = `$&#123;name&#125;的考试成绩不及格`;\n&#125;</code></pre>\n<p><strong>改进</strong></p>\n<p>ES6 字符串模板在${}中可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p>\n<pre><code class=\"js\">const name = &quot;小明&quot;;\nconst score = 59;\nconst result = `$&#123;name&#125;$&#123;score &gt; 60 ? &quot;的考试成绩及格&quot; : &quot;的考试成绩不及格&quot;&#125;`;</code></pre>\n<h1 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h1><p>经常看到这样的写法：</p>\n<pre><code class=\"js\">if(\n    type == 1 ||\n    type == 2 ||\n    type == 3 ||\n    type == 4 ||\n)&#123;\n   //...\n&#125;\n</code></pre>\n<p><strong>改进</strong><br>includes 方法返回一个布尔值，表示某个数组是否包含给定的值,可以简化上面的写法：</p>\n<pre><code class=\"js\">const condition = [1, 2, 3, 4];\n\nif (condition.includes(type)) &#123;\n  //...\n&#125;</code></pre>\n<h1 id=\"扁平化数组\"><a href=\"#扁平化数组\" class=\"headerlink\" title=\"扁平化数组\"></a>扁平化数组</h1><p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p>\n<pre><code class=\"js\">const deps = &#123;\n  采购部: [1, 2, 3],\n  人事部: [5, 8, 12],\n  行政部: [5, 14, 79],\n  运输部: [3, 64, 105],\n&#125;;\nlet member = [];\nfor (let item in deps) &#123;\n  const value = deps[item];\n  if (Array.isArray(value)) &#123;\n    member = [...member, ...value];\n  &#125;\n&#125;\nmember = [...new Set(member)];</code></pre>\n<p><strong>改进</strong></p>\n<p>利用<code>Object.values</code>获取对象的全部属性，然后 ES6 提供的<code>flat</code>方法来扁平化：</p>\n<pre><code class=\"js\">const deps = &#123;\n  采购部: [1, 2, 3],\n  人事部: [5, 8, 12],\n  行政部: [5, 14, 79],\n  运输部: [3, 64, 105],\n&#125;;\nlet member = Object.values(deps).flat(Infinity);</code></pre>\n<h1 id=\"获取对象属性\"><a href=\"#获取对象属性\" class=\"headerlink\" title=\"获取对象属性\"></a>获取对象属性</h1><p>业务代码中经常会遇到这样的情况，a对象有个属性b,b 也是一个对象有个属性 c,我们需要访问 c，经常会写成 a.b.c，但是如果 f 不存在时，就会出错。</p>\n<pre><code class=\"js\">const a = &#123;\n    b: &#123;\n        c: 123,\n    &#125;\n&#125;\nconsole.log(a.b.c); // 123;\nconsole.log(a.f.c); // f不存在所以会报错\n</code></pre>\n<p><strong>改进</strong><br><code>可选链运算符</code>解决该问题，通过在.之前添加一个?将键名变成可选</p>\n<pre><code class=\"js\">let person = &#123;&#125;;\nconsole.log(person?.profile?.age ?? 18); // 18\n</code></pre>\n<h1 id=\"空值判断\"><a href=\"#空值判断\" class=\"headerlink\" title=\"空值判断\"></a>空值判断</h1><p>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</p>\n<pre><code class=\"js\">if(value !== null &amp;&amp; value !== undefined &amp;&amp; value !== &#39;&#39;)&#123;\n    //...\n&#125;\n</code></pre>\n<p><strong>改进</strong><br><code>空值合并运算符</code>与<code>||运算</code>很像，但是可以省略很多代码，可读性也增强。</p>\n<pre><code class=\"js\">if((value??&#39;&#39;) !== &#39;&#39;)&#123;\n  //...\n&#125;</code></pre>\n<p><strong>注意</strong><br>假设变量a不存在，我们希望给系统一个默认值，一般我们会使用||运算符。但是在javascript中空字符串，0，false都会执行||运算符，所以ECMAScript2020引入合并空运算符解决该问题，只允许在值为null或未定义时使用默认值。</p>\n<pre><code class=\"js\">\nconst name = &#39;&#39;;\n\nconsole.log(name || &#39;yd&#39;); // yd;\nconsole.log(name ?? &#39;yd&#39;); // &#39;&#39;;\n</code></pre>\n","categories":[{"name":"ES语法","path":"api/categories/ES语法.json"}],"tags":[{"name":"项目总结","path":"api/tags/项目总结.json"},{"name":"es","path":"api/tags/es.json"}]}