{"title":"spread和rest操作符","slug":"spread和rest操作符","date":"2020-11-09T08:23:27.000Z","updated":"2022-01-10T08:00:47.661Z","comments":true,"path":"api/articles/spread和rest操作符.json","excerpt":null,"covers":null,"content":"<h1 id=\"spread和rest的区别\"><a href=\"#spread和rest的区别\" class=\"headerlink\" title=\"spread和rest的区别\"></a>spread和rest的区别</h1><p>spread和rest运算符都是<code>...</code>+<code>变量/参数</code>的形式。是spread还是rest，要根据上下文情境来判断。</p>\n<h2 id=\"1-spread\"><a href=\"#1-spread\" class=\"headerlink\" title=\"1.spread\"></a>1.spread</h2><p>当被用于迭代器中时，它是 spread 操作符：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1 2 3 4 5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//[1,2,3,4,5]</span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 42</span></code></pre>\n<p>spread主要形式是<code>...[Array]</code>，表示对数组的展开。</p>\n<h2 id=\"2-rest\"><a href=\"#2-rest\" class=\"headerlink\" title=\"2.rest\"></a>2.rest</h2><p>当被用于定义函数的参数时，是 rest 操作符：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//[4,1,2,3]</span></code></pre>\n<p>rest主要是将函数的多个参数转化成数组，<strong>而且只能放在函数参数的最后一个位置</strong>，否则，比如<code>（array,...items,other）</code>会报错。 </p>\n<p>而rest的出现，让已经不被推荐使用的<code>arguments</code>彻底寿终正寝了。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//spread形式的用法</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> 1,2,3</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> 1,2,3</span></code></pre>\n<h1 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h1><h2 id=\"1-添加属性\"><a href=\"#1-添加属性\" class=\"headerlink\" title=\"1.添加属性\"></a>1.添加属性</h2><p>克隆一个对象，同时向(浅)拷贝对象添加附加属性。<br>在这个示例中，user 被(浅)拷贝，password 属性被添加到 userWithPass 中。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Howard Moon'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> userWithPass <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\nuser <span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'Howard Moon' }</span>\nuserWithPass <span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'Howard Moon', password: 'Password!' }</span></code></pre>\n<h2 id=\"2-对象合并\"><a href=\"#2-对象合并\" class=\"headerlink\" title=\"2.对象合并\"></a>2.对象合并</h2><p>将两个对象合并到一个新对象中。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Howard Moon'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>part1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>part2 <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'Howard Moon', password: 'Password!' }</span></code></pre>\n<p>对象也可以使用以下语法合并：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> partial <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Howard Moon'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>partial<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span> <span class=\"token punctuation\">}</span>\n\nuser <span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'Howard Moon', password: 'Password!' }</span></code></pre>\n<h2 id=\"3-排除对象属性\"><a href=\"#3-排除对象属性\" class=\"headerlink\" title=\"3.排除对象属性\"></a>3.排除对象属性</h2><p>可以结合使用 rest 运算符删除属性。 在下面这个例子里，password 被删除 ，其余的属性作为 rest 返回。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> noPassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> password<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> rest\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'coffe1891'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">noPassword</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'coffe1891' }</span></code></pre>\n<h2 id=\"4-动态排除属性\"><a href=\"#4-动态排除属性\" class=\"headerlink\" title=\"4.动态排除属性\"></a>4.动态排除属性</h2><p>函数接受一个 prop 作为参数。使用计算对象属性名称，可以从克隆中动态地删除属性。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'coffe1891'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> removeProperty <span class=\"token operator\">=</span> prop <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> rest\n<span class=\"token comment\" spellcheck=\"true\">//                     ----       ------</span>\n<span class=\"token comment\" spellcheck=\"true\">//                          \\   /</span>\n<span class=\"token comment\" spellcheck=\"true\">//                dynamic destructuring</span>\n\n<span class=\"token keyword\">const</span> removePassword <span class=\"token operator\">=</span> <span class=\"token function\">removeProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> removeId <span class=\"token operator\">=</span> <span class=\"token function\">removeProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">removePassword</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'coffe1891' }</span>\n<span class=\"token function\">removeId</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//>> { name: 'coffe1891', password: 'Password!' }</span></code></pre>\n<h2 id=\"5-对属性进行排序\"><a href=\"#5-对属性进行排序\" class=\"headerlink\" title=\"5.对属性进行排序\"></a>5.对属性进行排序</h2><p>有时性质并不按照我们需要的顺序排列。 使用一些技巧，我们可以将属性推到列表的顶部，或者将它们移到底部。若要将 id 移动到第一个位置，在扩展对象之前将 <code>id: undefined</code> 添加到新的 Object 最前面。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Naboo'</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> organize <span class=\"token operator\">=</span> object <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//                            -------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//                          /</span>\n<span class=\"token comment\" spellcheck=\"true\">//  move id to the first property</span>\n\n<span class=\"token function\">organize</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> { id: 300, password: 'Password!', name: 'Naboo' }</span></code></pre>\n<p>若要将 password 移到最后一个属性，请从对象中解构 password。然后在使用 Rest 操作符后重新设置 password 属性。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'Password!'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Naboo'</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> organize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> password<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>object<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//              --------</span>\n<span class=\"token comment\" spellcheck=\"true\">//             /</span>\n<span class=\"token comment\" spellcheck=\"true\">// move password to last property</span>\n\n<span class=\"token function\">organize</span><span class=\"token punctuation\">(</span>user3<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> { name: 'Naboo', id: 300, password: 'Password!' }</span></code></pre>\n<h2 id=\"6-默认属性\"><a href=\"#6-默认属性\" class=\"headerlink\" title=\"6.默认属性\"></a>6.默认属性</h2><p>默认属性是仅当它们不包含在原始对象中时才设置的值。<br>在本例中，user2 不包含 quotes 属性。 setdefaults 函数确保所有对象都设置了 quotes 属性，否则它将被设置为<code>[]</code>。<br>当调用 setDefaults (user2)时，返回值将包含 quotes 属性: <code>[]</code>。<br>在调用 setDefaults (user4)时，因为 user4 已经有了 quotes 属性，所以不会修改该属性。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vince Noir'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bollo'</span><span class=\"token punctuation\">,</span>\n  quotes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I've got a bad feeling about this...\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> setDefaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> quotes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>object<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>object<span class=\"token punctuation\">,</span> quotes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setDefaults</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> { id: 200, name: 'Vince Noir', quotes: [] }</span>\n\n<span class=\"token function\">setDefaults</span><span class=\"token punctuation\">(</span>user4<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> {</span>\n<span class=\"token comment\" spellcheck=\"true\">//>>   id: 400,</span>\n<span class=\"token comment\" spellcheck=\"true\">//>>   name: 'Bollo',</span>\n<span class=\"token comment\" spellcheck=\"true\">//>>   quotes: [\"I've got a bad feeling about this...\"]</span>\n<span class=\"token comment\" spellcheck=\"true\">//>> }</span></code></pre>\n<p>如果你希望默认值先出现而不是后出现，也可以这样写：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> setDefaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>object<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> quotes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"7-属性重命名\"><a href=\"#7-属性重命名\" class=\"headerlink\" title=\"7.属性重命名\"></a>7.属性重命名</h2><p>通过结合上面的技术，可以创建一个函数来重命名属性。假设有一些大写 ID 的对象属性名应该是小写的 id。 首先从对象解构 ID 然后在对象 Spread 时将其作为 id 添加回去。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> renamed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ID<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> ID<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>object <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ID<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob Fossil\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">renamed</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//>> { id: 500, name: 'Bob Fossil' }</span></code></pre>\n<h2 id=\"8-添加条件属性\"><a href=\"#8-添加条件属性\" class=\"headerlink\" title=\"8.添加条件属性\"></a>8.添加条件属性</h2><p>在这个例子中，只有当 password 是真实的时候才会添加 password。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Howard Moon'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token string\">'Password!'</span>\n<span class=\"token keyword\">const</span> userWithPassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>user<span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>password <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nuserWithPassword <span class=\"token comment\" spellcheck=\"true\">//>> { id: 100, name: 'Howard Moon', password: 'Password!' }</span></code></pre>\n","more":"<h1 id=\"spread和rest的区别\"><a href=\"#spread和rest的区别\" class=\"headerlink\" title=\"spread和rest的区别\"></a>spread和rest的区别</h1><p>spread和rest运算符都是<code>...</code>+<code>变量/参数</code>的形式。是spread还是rest，要根据上下文情境来判断。</p>\n<h2 id=\"1-spread\"><a href=\"#1-spread\" class=\"headerlink\" title=\"1.spread\"></a>1.spread</h2><p>当被用于迭代器中时，它是 spread 操作符：</p>\n<pre><code class=\"javascript\">console.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\nconsole.log([1, ...[2, 3, 4], 5])\n//[1,2,3,4,5]</code></pre>\n<pre><code class=\"javascript\">function add(x, y) &#123;\n  return x + y;\n&#125;\n\nconst numbers = [4, 38];\nadd(...numbers) // 42</code></pre>\n<p>spread主要形式是<code>...[Array]</code>，表示对数组的展开。</p>\n<h2 id=\"2-rest\"><a href=\"#2-rest\" class=\"headerlink\" title=\"2.rest\"></a>2.rest</h2><p>当被用于定义函数的参数时，是 rest 操作符：</p>\n<pre><code class=\"javascript\">function push(...items) &#123;\n    console.log(items);\n&#125;\nlet a = 4;\npush(a, 1, 2, 3)\n//[4,1,2,3]</code></pre>\n<p>rest主要是将函数的多个参数转化成数组，<strong>而且只能放在函数参数的最后一个位置</strong>，否则，比如<code>（array,...items,other）</code>会报错。 </p>\n<p>而rest的出现，让已经不被推荐使用的<code>arguments</code>彻底寿终正寝了。</p>\n<pre><code class=\"javascript\">(function fn(...args) &#123;\n   console.log(args.join());\n   console.log([...arguments].join());//spread形式的用法\n&#125;)([1,2,3]);\n//&gt;&gt; 1,2,3\n//&gt;&gt; 1,2,3</code></pre>\n<h1 id=\"用法示例\"><a href=\"#用法示例\" class=\"headerlink\" title=\"用法示例\"></a>用法示例</h1><h2 id=\"1-添加属性\"><a href=\"#1-添加属性\" class=\"headerlink\" title=\"1.添加属性\"></a>1.添加属性</h2><p>克隆一个对象，同时向(浅)拷贝对象添加附加属性。<br>在这个示例中，user 被(浅)拷贝，password 属性被添加到 userWithPass 中。</p>\n<pre><code class=\"javascript\">const user = &#123; id: 100, name: &#39;Howard Moon&#39;&#125;\nconst userWithPass = &#123; ...user, password: &#39;Password!&#39; &#125;\n\nuser //&gt;&gt; &#123; id: 100, name: &#39;Howard Moon&#39; &#125;\nuserWithPass //&gt;&gt; &#123; id: 100, name: &#39;Howard Moon&#39;, password: &#39;Password!&#39; &#125;</code></pre>\n<h2 id=\"2-对象合并\"><a href=\"#2-对象合并\" class=\"headerlink\" title=\"2.对象合并\"></a>2.对象合并</h2><p>将两个对象合并到一个新对象中。</p>\n<pre><code class=\"javascript\">const part1 = &#123; id: 100, name: &#39;Howard Moon&#39; &#125;\nconst part2 = &#123; id: 100, password: &#39;Password!&#39; &#125;\n\nconst user1 = &#123; ...part1, ...part2 &#125;\n//&gt;&gt; &#123; id: 100, name: &#39;Howard Moon&#39;, password: &#39;Password!&#39; &#125;</code></pre>\n<p>对象也可以使用以下语法合并：</p>\n<pre><code class=\"javascript\">const partial = &#123; id: 100, name: &#39;Howard Moon&#39; &#125;\nconst user = &#123; ...partial, id: 100, password: &#39;Password!&#39; &#125;\n\nuser //&gt;&gt; &#123; id: 100, name: &#39;Howard Moon&#39;, password: &#39;Password!&#39; &#125;</code></pre>\n<h2 id=\"3-排除对象属性\"><a href=\"#3-排除对象属性\" class=\"headerlink\" title=\"3.排除对象属性\"></a>3.排除对象属性</h2><p>可以结合使用 rest 运算符删除属性。 在下面这个例子里，password 被删除 ，其余的属性作为 rest 返回。</p>\n<pre><code class=\"javascript\">const noPassword = (&#123; password, ...rest &#125;) =&gt; rest\nconst user = &#123;\n  id: 100,\n  name: &#39;coffe1891&#39;,\n  password: &#39;Password!&#39;\n&#125;\n\nnoPassword(user) //&gt;&gt; &#123; id: 100, name: &#39;coffe1891&#39; &#125;</code></pre>\n<h2 id=\"4-动态排除属性\"><a href=\"#4-动态排除属性\" class=\"headerlink\" title=\"4.动态排除属性\"></a>4.动态排除属性</h2><p>函数接受一个 prop 作为参数。使用计算对象属性名称，可以从克隆中动态地删除属性。</p>\n<pre><code class=\"javascript\">const user1 = &#123;\n  id: 100,\n  name: &#39;coffe1891&#39;,\n  password: &#39;Password!&#39;\n&#125;\nconst removeProperty = prop =&gt; (&#123; [prop]: _, ...rest &#125;) =&gt; rest\n//                     ----       ------\n//                          \\   /\n//                dynamic destructuring\n\nconst removePassword = removeProperty(&#39;password&#39;)\nconst removeId = removeProperty(&#39;id&#39;)\n\nremovePassword(user1) //&gt;&gt; &#123; id: 100, name: &#39;coffe1891&#39; &#125;\nremoveId(user1) //&gt;&gt; &#123; name: &#39;coffe1891&#39;, password: &#39;Password!&#39; &#125;</code></pre>\n<h2 id=\"5-对属性进行排序\"><a href=\"#5-对属性进行排序\" class=\"headerlink\" title=\"5.对属性进行排序\"></a>5.对属性进行排序</h2><p>有时性质并不按照我们需要的顺序排列。 使用一些技巧，我们可以将属性推到列表的顶部，或者将它们移到底部。若要将 id 移动到第一个位置，在扩展对象之前将 <code>id: undefined</code> 添加到新的 Object 最前面。</p>\n<pre><code class=\"javascript\">const user3 = &#123;\n  password: &#39;Password!&#39;,\n  name: &#39;Naboo&#39;,\n  id: 300\n&#125;\n\nconst organize = object =&gt; (&#123; id: undefined, ...object &#125;)\n//                            -------------\n//                          /\n//  move id to the first property\n\norganize(user3)\n//&gt;&gt; &#123; id: 300, password: &#39;Password!&#39;, name: &#39;Naboo&#39; &#125;</code></pre>\n<p>若要将 password 移到最后一个属性，请从对象中解构 password。然后在使用 Rest 操作符后重新设置 password 属性。</p>\n<pre><code class=\"javascript\">const user3 = &#123;\n  password: &#39;Password!&#39;,\n  name: &#39;Naboo&#39;,\n  id: 300\n&#125;\n\nconst organize = (&#123; password, ...object &#125;) =&gt;\n  (&#123; ...object, password &#125;)\n//              --------\n//             /\n// move password to last property\n\norganize(user3)\n//&gt;&gt; &#123; name: &#39;Naboo&#39;, id: 300, password: &#39;Password!&#39; &#125;</code></pre>\n<h2 id=\"6-默认属性\"><a href=\"#6-默认属性\" class=\"headerlink\" title=\"6.默认属性\"></a>6.默认属性</h2><p>默认属性是仅当它们不包含在原始对象中时才设置的值。<br>在本例中，user2 不包含 quotes 属性。 setdefaults 函数确保所有对象都设置了 quotes 属性，否则它将被设置为<code>[]</code>。<br>当调用 setDefaults (user2)时，返回值将包含 quotes 属性: <code>[]</code>。<br>在调用 setDefaults (user4)时，因为 user4 已经有了 quotes 属性，所以不会修改该属性。</p>\n<pre><code class=\"javascript\">const user2 = &#123;\n  id: 200,\n  name: &#39;Vince Noir&#39;\n&#125;\n\nconst user4 = &#123;\n  id: 400,\n  name: &#39;Bollo&#39;,\n  quotes: [&quot;I&#39;ve got a bad feeling about this...&quot;]\n&#125;\n\nconst setDefaults = (&#123; quotes = [], ...object&#125;) =&gt;\n  (&#123; ...object, quotes &#125;)\n\nsetDefaults(user2)\n//&gt;&gt; &#123; id: 200, name: &#39;Vince Noir&#39;, quotes: [] &#125;\n\nsetDefaults(user4)\n//&gt;&gt; &#123;\n//&gt;&gt;   id: 400,\n//&gt;&gt;   name: &#39;Bollo&#39;,\n//&gt;&gt;   quotes: [&quot;I&#39;ve got a bad feeling about this...&quot;]\n//&gt;&gt; &#125;</code></pre>\n<p>如果你希望默认值先出现而不是后出现，也可以这样写：</p>\n<pre><code class=\"javascript\">const setDefaults = (&#123; ...object&#125;) =&gt; (&#123; quotes: [], ...object &#125;)</code></pre>\n<h2 id=\"7-属性重命名\"><a href=\"#7-属性重命名\" class=\"headerlink\" title=\"7.属性重命名\"></a>7.属性重命名</h2><p>通过结合上面的技术，可以创建一个函数来重命名属性。假设有一些大写 ID 的对象属性名应该是小写的 id。 首先从对象解构 ID 然后在对象 Spread 时将其作为 id 添加回去。</p>\n<pre><code class=\"javascript\">const renamed = (&#123; ID, ...object &#125;) =&gt; (&#123; id: ID, ...object &#125;)\n\nconst user = &#123;\n  ID: 500,\n  name: &quot;Bob Fossil&quot;\n&#125;\n\nrenamed(user) //&gt;&gt; &#123; id: 500, name: &#39;Bob Fossil&#39; &#125;</code></pre>\n<h2 id=\"8-添加条件属性\"><a href=\"#8-添加条件属性\" class=\"headerlink\" title=\"8.添加条件属性\"></a>8.添加条件属性</h2><p>在这个例子中，只有当 password 是真实的时候才会添加 password。</p>\n<pre><code class=\"javascript\">const user = &#123; id: 100, name: &#39;Howard Moon&#39; &#125;\nconst password = &#39;Password!&#39;\nconst userWithPassword = &#123;\n  ...user,\n  id: 100,\n  ...(password &amp;&amp; &#123; password &#125;)\n&#125;\n\nuserWithPassword //&gt;&gt; &#123; id: 100, name: &#39;Howard Moon&#39;, password: &#39;Password!&#39; &#125;</code></pre>\n","categories":[{"name":"ES语法","path":"api/categories/ES语法.json"}],"tags":[{"name":"ES语法","path":"api/tags/ES语法.json"}]}