{"title":"浮点数运算的精度问题","slug":"浮点数运算的精度问题","date":"2022-01-10T08:10:31.000Z","updated":"2022-01-10T08:52:30.133Z","comments":true,"path":"api/articles/浮点数运算的精度问题.json","excerpt":null,"covers":["https://bu.dusays.com/2022/01/10/4108f12333606.jpg"],"content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在项目中涉及到商品价格的计算，经常会出现计算精度问题，引发意想不到的BUG。这是因为在 JavaScript 中整数和浮点数都属于 Number 数据类型，所有数字都是以 64 位浮点数形式储存，即便整数也是如此。 所以我们在打印 1.00 这样的浮点数的结果是 1 而非 1.00 。</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><h2 id=\"浮点运算的问题\"><a href=\"#浮点运算的问题\" class=\"headerlink\" title=\"浮点运算的问题\"></a>浮点运算的问题</h2><p>在一些特殊的数值表示中，例如金额，这样看上去有点变扭，但是至少值是正确了。然而要命的是，当浮点数做数学运算的时候，你经常会发现一些问题，举几个例子：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 加法 =====================</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.1 + 0.2 = 0.30000000000000004</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.7 + 0.1 = 0.7999999999999999</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.2 + 0.4 = 0.6000000000000001</span>\n<span class=\"token comment\" spellcheck=\"true\">// 2.22 + 0.1 = 2.3200000000000003</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 减法 =====================</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1.5 - 1.2 = 0.30000000000000004</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.3 - 0.2 = 0.09999999999999998</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 乘法 =====================</span>\n<span class=\"token comment\" spellcheck=\"true\">// 19.9 * 100 = 1989.9999999999998</span>\n<span class=\"token comment\" spellcheck=\"true\">// 19.9 * 10 * 10 = 1990</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1306377.64 * 100 = 130637763.99999999</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1306377.64 * 10 * 10 = 130637763.99999999</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.7 * 180 = 125.99999999999999</span>\n<span class=\"token comment\" spellcheck=\"true\">// 9.7 * 100 = 969.9999999999999</span>\n<span class=\"token comment\" spellcheck=\"true\">// 39.7 * 100 = 3970.0000000000005</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 除法 =====================</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.3 / 0.1 = 2.9999999999999996</span>\n<span class=\"token comment\" spellcheck=\"true\">// 0.69 / 10 = 0.06899999999999999</span></code></pre>\n<h2 id=\"整数的精度问题\"><a href=\"#整数的精度问题\" class=\"headerlink\" title=\"整数的精度问题\"></a>整数的精度问题</h2><p>在 Javascript 中，整数精度同样存在问题，先来看看问题：</p>\n<p>JavaScript 代码:</p>\n<pre class=\" language-js\"><code class=\"language-js\">\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">19571992547450991</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//=> 19571992547450990</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">19571992547450991</span><span class=\"token operator\">===</span><span class=\"token number\">19571992547450992</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//=> true</span></code></pre>\n<p>同样的原因，在 JavaScript 中 Number类型统一按浮点数处理，整数是按最大54位来算最大(253 - 1，Number.MAX_SAFE_INTEGER,9007199254740991) 和最小(-(253 - 1)，Number.MIN_SAFE_INTEGER,-9007199254740991) 安全整数范围的。所以只要超过这个范围，就会存在被舍去的精度问题。</p>\n<p>当然这个问题并不只是在 Javascript 中才会出现，几乎所有的编程语言都采用了 IEEE-745 浮点数表示法，任何使用二进制浮点数的编程语言都会有这个问题，只不过在很多其他语言中已经封装好了方法来避免精度的问题，而 JavaScript 是一门弱类型的语言，从设计思想上就没有对浮点数有个严格的数据类型，所以精度误差的问题就显得格外突出。</p>\n<h2 id=\"toFixed的问题\"><a href=\"#toFixed的问题\" class=\"headerlink\" title=\"toFixed的问题\"></a>toFixed的问题</h2><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token number\">1.35</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1.4 正确</span>\n<span class=\"token number\">1.335</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1.33  错误</span>\n<span class=\"token number\">1.3335</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1.333 错误</span>\n<span class=\"token number\">1.33335</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1.3334 正确</span>\n<span class=\"token number\">1.333335</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// 1.33333 错误</span>\n<span class=\"token number\">1.3333335</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 1.333333 错误</span>\n</code></pre>\n<h1 id=\"问题的原因\"><a href=\"#问题的原因\" class=\"headerlink\" title=\"问题的原因\"></a>问题的原因</h1><h2 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h2><p>JavaScript 里的数字是采用 IEEE 754 标准的 64 位双精度浮点数。该规范定义了浮点数的格式，对于64位的浮点数在内存中的表示，最高的1位是符号位，接着的11位是指数，剩下的52位为有效数字，具体：</p>\n<ul>\n<li>第0位：符号位， s 表示 ，0表示正数，1表示负数；</li>\n<li>第1位到第11位：储存指数部分， e 表示 ；</li>\n<li>第12位到第63位：储存小数部分（即有效数字），f 表示，</li>\n</ul>\n<p>如图：<br><img src=\"https://bu.dusays.com/2022/01/10/4108f12333606.jpg\"></p>\n<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。 IEEE 754规定，有效数字第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字总是1.xx…xx的形式，其中xx..xx的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript提供的有效数字最长为53个二进制位（64位浮点的后52位+有效数字第一位的1）。</p>\n<h2 id=\"计算过程\"><a href=\"#计算过程\" class=\"headerlink\" title=\"计算过程\"></a>计算过程</h2><p>比如在 JavaScript 中计算 0.1 + 0.2时，到底发生了什么呢？</p>\n<p>首先，十进制的0.1和0.2都会被转换成二进制，但由于浮点数用二进制表达时是无穷的，例如。</p>\n<p>JavaScript 代码:</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token number\">0.1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0.0001</span> <span class=\"token number\">1001</span> <span class=\"token number\">1001</span> <span class=\"token number\">1001</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token number\">1100</span>循环<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.2</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0.0011</span> <span class=\"token number\">0011</span> <span class=\"token number\">0011</span> <span class=\"token number\">0011</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token number\">0011</span>循环<span class=\"token punctuation\">)</span>\n</code></pre>\n<p> IEEE 754 标准的 64 位双精度浮点数的小数部分最多支持53位二进制位，所以两者相加之后得到二进制为：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token number\">0.0100110011001100110011001100110011001100110011001100</span> \n</code></pre>\n<p>因浮点数小数位的限制而截断的二进制数字，再转换为十进制，就成了0.30000000000000004。所以在进行算术计算时会产生误差。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"类库\"><a href=\"#类库\" class=\"headerlink\" title=\"类库\"></a>类库</h2><p>通常这种对精度要求高的计算都应该交给后端去计算和存储，因为后端有成熟的库来解决这种计算问题。前端也有几个不错的类库：</p>\n<h3 id=\"Math-js\"><a href=\"#Math-js\" class=\"headerlink\" title=\"Math.js\"></a>Math.js</h3><p>Math.js 是专门为 JavaScript 和 Node.js 提供的一个广泛的数学库。它具有灵活的表达式解析器，支持符号计算，配有大量内置函数和常量，并提供集成解决方案来处理不同的数据类型<br>像数字，大数字(超出安全数的数字)，复数，分数，单位和矩阵。 功能强大，易于使用。</p>\n<p>官网：<a href=\"http://mathjs.org/\">http://mathjs.org/</a></p>\n<p>GitHub：<a href=\"https://github.com/josdejong/mathjs\">https://github.com/josdejong/mathjs</a></p>\n<h3 id=\"decimal-js\"><a href=\"#decimal-js\" class=\"headerlink\" title=\"decimal.js\"></a>decimal.js</h3><p>为 JavaScript 提供十进制类型的任意精度数值。</p>\n<p>官网：<a href=\"http://mikemcl.github.io/decimal.js/\">http://mikemcl.github.io/decimal.js/</a></p>\n<p>GitHub：<a href=\"https://github.com/MikeMcl/decimal.js\">https://github.com/MikeMcl/decimal.js</a></p>\n<h3 id=\"big-js\"><a href=\"#big-js\" class=\"headerlink\" title=\"big.js\"></a>big.js</h3><p>官网：<a href=\"http://mikemcl.github.io/big.js\">http://mikemcl.github.io/big.js</a></p>\n<p>GitHub：<a href=\"https://github.com/MikeMcl/big.js/\">https://github.com/MikeMcl/big.js/</a></p>\n<p>这几个类库帮我们解决很多这类问题，不过通常我们前端做这类运算通常只用于表现层，应用并不是很多。所以很多时候，一个函数能解决的问题不需要引用一个类库来解决。</p>\n<h2 id=\"整数表示\"><a href=\"#整数表示\" class=\"headerlink\" title=\"整数表示\"></a>整数表示</h2><p>对于整数，我们可以通过用<strong>String</strong>类型的表示来取值或传值，否则会丧失精度。</p>\n<h2 id=\"格式化数字、金额、保留几位小数等\"><a href=\"#格式化数字、金额、保留几位小数等\" class=\"headerlink\" title=\"格式化数字、金额、保留几位小数等\"></a>格式化数字、金额、保留几位小数等</h2><h3 id=\"Numeral-js\"><a href=\"#Numeral-js\" class=\"headerlink\" title=\"Numeral.js\"></a>Numeral.js</h3><p>一个用于格式化和操作数字的JavaScript库。数字可以被格式化为货币，百分比，时间，几个小数位数，千分位等等。 您也可以随时创建自定义格式。</p>\n<p>官网及文档：<a href=\"http://numeraljs.com/\">http://numeraljs.com/</a></p>\n<p>GitHub：<a href=\"https://github.com/adamwdraper/Numeral-js\">https://github.com/adamwdraper/Numeral-js</a></p>\n<h3 id=\"accounting-js\"><a href=\"#accounting-js\" class=\"headerlink\" title=\"accounting.js\"></a>accounting.js</h3><p>一个轻量级的JavaScript库，用于格式化数字，金额和货币等。</p>\n<p>官网及文档：<a href=\"http://openexchangerates.github.io/accounting.js/\">http://openexchangerates.github.io/accounting.js/</a></p>\n<p>GitHub：<a href=\"https://github.com/openexchangerates/accounting.js\">https://github.com/openexchangerates/accounting.js</a></p>\n<h2 id=\"解决toFixed\"><a href=\"#解决toFixed\" class=\"headerlink\" title=\"解决toFixed\"></a>解决toFixed</h2><p>针对toFixed的兼容性问题，我们可以把toFix重写一下来解决，代码如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token comment\" spellcheck=\"true\">// toFixed兼容方法</span>\nNumber<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toFixed <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">></span><span class=\"token number\">20</span> <span class=\"token operator\">||</span> len<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RangeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toFixed() digits argument must be between 0 and 20'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// .123转为0.123</span>\n    <span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> number <span class=\"token operator\">>=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        numberArr <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numberArr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//整数的情况</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">padNum</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> intNum <span class=\"token operator\">=</span> numberArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//整数部分</span>\n        deciNum <span class=\"token operator\">=</span> numberArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">//小数部分</span>\n        lastNum <span class=\"token operator\">=</span> deciNum<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//最后一个数字</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deciNum<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//需要截取的长度等于当前长度</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deciNum<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//需要截取的长度大于当前长度 1.3.toFixed(2)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">padNum</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//需要截取的长度小于当前长度，需要判断最后一位数字</span>\n    result <span class=\"token operator\">=</span> intNum <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> deciNum<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>lastNum<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//最后一位数字大于5，要进位</span>\n        <span class=\"token keyword\">var</span> times <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//需要放大的倍数</span>\n        <span class=\"token keyword\">var</span> changedInt <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//截取后转为整数</span>\n        changedInt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//整数进位</span>\n        changedInt <span class=\"token operator\">/</span><span class=\"token operator\">=</span> times<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//整数转为小数，注：有可能还是整数</span>\n        result <span class=\"token operator\">=</span> <span class=\"token function\">padNum</span><span class=\"token punctuation\">(</span>changedInt<span class=\"token operator\">+</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//对数字末尾加0</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">padNum</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> dotPos <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dotPos <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//整数的情况</span>\n            num <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                num <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//小数的情况</span>\n            <span class=\"token keyword\">var</span> need <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> dotPos <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>need<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                num <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们通过判断最后一位是否大于等于5来决定需不需要进位，如果需要进位先把小数乘以倍数变为整数，加1之后，再除以倍数变为小数，这样就不用一位一位的进行判断。</p>\n","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在项目中涉及到商品价格的计算，经常会出现计算精度问题，引发意想不到的BUG。这是因为在 JavaScript 中整数和浮点数都属于 Number 数据类型，所有数字都是以 64 位浮点数形式储存，即便整数也是如此。 所以我们在打印 1.00 这样的浮点数的结果是 1 而非 1.00 。</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><h2 id=\"浮点运算的问题\"><a href=\"#浮点运算的问题\" class=\"headerlink\" title=\"浮点运算的问题\"></a>浮点运算的问题</h2><p>在一些特殊的数值表示中，例如金额，这样看上去有点变扭，但是至少值是正确了。然而要命的是，当浮点数做数学运算的时候，你经常会发现一些问题，举几个例子：</p>\n<pre><code class=\"js\">// 加法 =====================\n// 0.1 + 0.2 = 0.30000000000000004\n// 0.7 + 0.1 = 0.7999999999999999\n// 0.2 + 0.4 = 0.6000000000000001\n// 2.22 + 0.1 = 2.3200000000000003\n\n// 减法 =====================\n// 1.5 - 1.2 = 0.30000000000000004\n// 0.3 - 0.2 = 0.09999999999999998\n\n// 乘法 =====================\n// 19.9 * 100 = 1989.9999999999998\n// 19.9 * 10 * 10 = 1990\n// 1306377.64 * 100 = 130637763.99999999\n// 1306377.64 * 10 * 10 = 130637763.99999999\n// 0.7 * 180 = 125.99999999999999\n// 9.7 * 100 = 969.9999999999999\n// 39.7 * 100 = 3970.0000000000005\n\n// 除法 =====================\n// 0.3 / 0.1 = 2.9999999999999996\n// 0.69 / 10 = 0.06899999999999999</code></pre>\n<h2 id=\"整数的精度问题\"><a href=\"#整数的精度问题\" class=\"headerlink\" title=\"整数的精度问题\"></a>整数的精度问题</h2><p>在 Javascript 中，整数精度同样存在问题，先来看看问题：</p>\n<p>JavaScript 代码:</p>\n<pre><code class=\"js\">\nconsole.log(19571992547450991); //=&gt; 19571992547450990\nconsole.log(19571992547450991===19571992547450992); //=&gt; true</code></pre>\n<p>同样的原因，在 JavaScript 中 Number类型统一按浮点数处理，整数是按最大54位来算最大(253 - 1，Number.MAX_SAFE_INTEGER,9007199254740991) 和最小(-(253 - 1)，Number.MIN_SAFE_INTEGER,-9007199254740991) 安全整数范围的。所以只要超过这个范围，就会存在被舍去的精度问题。</p>\n<p>当然这个问题并不只是在 Javascript 中才会出现，几乎所有的编程语言都采用了 IEEE-745 浮点数表示法，任何使用二进制浮点数的编程语言都会有这个问题，只不过在很多其他语言中已经封装好了方法来避免精度的问题，而 JavaScript 是一门弱类型的语言，从设计思想上就没有对浮点数有个严格的数据类型，所以精度误差的问题就显得格外突出。</p>\n<h2 id=\"toFixed的问题\"><a href=\"#toFixed的问题\" class=\"headerlink\" title=\"toFixed的问题\"></a>toFixed的问题</h2><pre><code class=\"js\">1.35.toFixed(1) // 1.4 正确\n1.335.toFixed(2) // 1.33  错误\n1.3335.toFixed(3) // 1.333 错误\n1.33335.toFixed(4) // 1.3334 正确\n1.333335.toFixed(5)  // 1.33333 错误\n1.3333335.toFixed(6) // 1.333333 错误\n</code></pre>\n<h1 id=\"问题的原因\"><a href=\"#问题的原因\" class=\"headerlink\" title=\"问题的原因\"></a>问题的原因</h1><h2 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h2><p>JavaScript 里的数字是采用 IEEE 754 标准的 64 位双精度浮点数。该规范定义了浮点数的格式，对于64位的浮点数在内存中的表示，最高的1位是符号位，接着的11位是指数，剩下的52位为有效数字，具体：</p>\n<ul>\n<li>第0位：符号位， s 表示 ，0表示正数，1表示负数；</li>\n<li>第1位到第11位：储存指数部分， e 表示 ；</li>\n<li>第12位到第63位：储存小数部分（即有效数字），f 表示，</li>\n</ul>\n<p>如图：<br><img src=\"https://bu.dusays.com/2022/01/10/4108f12333606.jpg\"></p>\n<p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。 IEEE 754规定，有效数字第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字总是1.xx…xx的形式，其中xx..xx的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript提供的有效数字最长为53个二进制位（64位浮点的后52位+有效数字第一位的1）。</p>\n<h2 id=\"计算过程\"><a href=\"#计算过程\" class=\"headerlink\" title=\"计算过程\"></a>计算过程</h2><p>比如在 JavaScript 中计算 0.1 + 0.2时，到底发生了什么呢？</p>\n<p>首先，十进制的0.1和0.2都会被转换成二进制，但由于浮点数用二进制表达时是无穷的，例如。</p>\n<p>JavaScript 代码:</p>\n<pre><code class=\"js\">\n0.1 -&gt; 0.0001 1001 1001 1001...(1100循环)\n0.2 -&gt; 0.0011 0011 0011 0011...(0011循环)\n</code></pre>\n<p> IEEE 754 标准的 64 位双精度浮点数的小数部分最多支持53位二进制位，所以两者相加之后得到二进制为：</p>\n<pre><code class=\"js\">0.0100110011001100110011001100110011001100110011001100 \n</code></pre>\n<p>因浮点数小数位的限制而截断的二进制数字，再转换为十进制，就成了0.30000000000000004。所以在进行算术计算时会产生误差。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"类库\"><a href=\"#类库\" class=\"headerlink\" title=\"类库\"></a>类库</h2><p>通常这种对精度要求高的计算都应该交给后端去计算和存储，因为后端有成熟的库来解决这种计算问题。前端也有几个不错的类库：</p>\n<h3 id=\"Math-js\"><a href=\"#Math-js\" class=\"headerlink\" title=\"Math.js\"></a>Math.js</h3><p>Math.js 是专门为 JavaScript 和 Node.js 提供的一个广泛的数学库。它具有灵活的表达式解析器，支持符号计算，配有大量内置函数和常量，并提供集成解决方案来处理不同的数据类型<br>像数字，大数字(超出安全数的数字)，复数，分数，单位和矩阵。 功能强大，易于使用。</p>\n<p>官网：<a href=\"http://mathjs.org/\">http://mathjs.org/</a></p>\n<p>GitHub：<a href=\"https://github.com/josdejong/mathjs\">https://github.com/josdejong/mathjs</a></p>\n<h3 id=\"decimal-js\"><a href=\"#decimal-js\" class=\"headerlink\" title=\"decimal.js\"></a>decimal.js</h3><p>为 JavaScript 提供十进制类型的任意精度数值。</p>\n<p>官网：<a href=\"http://mikemcl.github.io/decimal.js/\">http://mikemcl.github.io/decimal.js/</a></p>\n<p>GitHub：<a href=\"https://github.com/MikeMcl/decimal.js\">https://github.com/MikeMcl/decimal.js</a></p>\n<h3 id=\"big-js\"><a href=\"#big-js\" class=\"headerlink\" title=\"big.js\"></a>big.js</h3><p>官网：<a href=\"http://mikemcl.github.io/big.js\">http://mikemcl.github.io/big.js</a></p>\n<p>GitHub：<a href=\"https://github.com/MikeMcl/big.js/\">https://github.com/MikeMcl/big.js/</a></p>\n<p>这几个类库帮我们解决很多这类问题，不过通常我们前端做这类运算通常只用于表现层，应用并不是很多。所以很多时候，一个函数能解决的问题不需要引用一个类库来解决。</p>\n<h2 id=\"整数表示\"><a href=\"#整数表示\" class=\"headerlink\" title=\"整数表示\"></a>整数表示</h2><p>对于整数，我们可以通过用<strong>String</strong>类型的表示来取值或传值，否则会丧失精度。</p>\n<h2 id=\"格式化数字、金额、保留几位小数等\"><a href=\"#格式化数字、金额、保留几位小数等\" class=\"headerlink\" title=\"格式化数字、金额、保留几位小数等\"></a>格式化数字、金额、保留几位小数等</h2><h3 id=\"Numeral-js\"><a href=\"#Numeral-js\" class=\"headerlink\" title=\"Numeral.js\"></a>Numeral.js</h3><p>一个用于格式化和操作数字的JavaScript库。数字可以被格式化为货币，百分比，时间，几个小数位数，千分位等等。 您也可以随时创建自定义格式。</p>\n<p>官网及文档：<a href=\"http://numeraljs.com/\">http://numeraljs.com/</a></p>\n<p>GitHub：<a href=\"https://github.com/adamwdraper/Numeral-js\">https://github.com/adamwdraper/Numeral-js</a></p>\n<h3 id=\"accounting-js\"><a href=\"#accounting-js\" class=\"headerlink\" title=\"accounting.js\"></a>accounting.js</h3><p>一个轻量级的JavaScript库，用于格式化数字，金额和货币等。</p>\n<p>官网及文档：<a href=\"http://openexchangerates.github.io/accounting.js/\">http://openexchangerates.github.io/accounting.js/</a></p>\n<p>GitHub：<a href=\"https://github.com/openexchangerates/accounting.js\">https://github.com/openexchangerates/accounting.js</a></p>\n<h2 id=\"解决toFixed\"><a href=\"#解决toFixed\" class=\"headerlink\" title=\"解决toFixed\"></a>解决toFixed</h2><p>针对toFixed的兼容性问题，我们可以把toFix重写一下来解决，代码如下：</p>\n<pre><code class=\"js\">\n// toFixed兼容方法\nNumber.prototype.toFixed = function(len)&#123;\n    if(len&gt;20 || len&lt;0)&#123;\n        throw new RangeError(&#39;toFixed() digits argument must be between 0 and 20&#39;);\n    &#125;\n    // .123转为0.123\n    var number = Number(this);\n    if (isNaN(number) || number &gt;= Math.pow(10, 21)) &#123;\n        return number.toString();\n    &#125;\n    if (typeof (len) == &#39;undefined&#39; || len == 0) &#123;\n        return (Math.round(number)).toString();\n    &#125;\n    var result = number.toString(),\n        numberArr = result.split(&#39;.&#39;);\n\n    if(numberArr.length&lt;2)&#123;\n        //整数的情况\n        return padNum(result);\n    &#125;\n    var intNum = numberArr[0], //整数部分\n        deciNum = numberArr[1],//小数部分\n        lastNum = deciNum.substr(len, 1);//最后一个数字\n\n    if(deciNum.length == len)&#123;\n        //需要截取的长度等于当前长度\n        return result;\n    &#125;\n    if(deciNum.length &lt; len)&#123;\n        //需要截取的长度大于当前长度 1.3.toFixed(2)\n        return padNum(result)\n    &#125;\n    //需要截取的长度小于当前长度，需要判断最后一位数字\n    result = intNum + &#39;.&#39; + deciNum.substr(0, len);\n    if(parseInt(lastNum, 10)&gt;=5)&#123;\n        //最后一位数字大于5，要进位\n        var times = Math.pow(10, len); //需要放大的倍数\n        var changedInt = Number(result.replace(&#39;.&#39;,&#39;&#39;));//截取后转为整数\n        changedInt++;//整数进位\n        changedInt /= times;//整数转为小数，注：有可能还是整数\n        result = padNum(changedInt+&#39;&#39;);\n    &#125;\n    return result;\n    //对数字末尾加0\n    function padNum(num)&#123;\n        var dotPos = num.indexOf(&#39;.&#39;);\n        if(dotPos === -1)&#123;\n            //整数的情况\n            num += &#39;.&#39;;\n            for(var i = 0;i&lt;len;i++)&#123;\n                num += &#39;0&#39;;\n            &#125;\n            return num;\n        &#125; else &#123;\n            //小数的情况\n            var need = len - (num.length - dotPos - 1);\n            for(var j = 0;j&lt;need;j++)&#123;\n                num += &#39;0&#39;;\n            &#125;\n            return num;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>我们通过判断最后一位是否大于等于5来决定需不需要进位，如果需要进位先把小数乘以倍数变为整数，加1之后，再除以倍数变为小数，这样就不用一位一位的进行判断。</p>\n","categories":[{"name":"ES语法","path":"api/categories/ES语法.json"}],"tags":[{"name":"项目总结","path":"api/tags/项目总结.json"}]}