{"title":"BFC原理及应用","slug":"BFC原理及应用","date":"2020-08-30T09:09:12.000Z","updated":"2020-11-02T07:41:51.891Z","comments":true,"path":"api/articles/BFC原理及应用.json","excerpt":null,"covers":["/images/css.png","https://7.dusays.com/2020/11/02/0afee71e5de5e.png","https://7.dusays.com/2020/11/02/0e302d5bce868.png","https://7.dusays.com/2020/11/02/f461d5e0dbd0f.png","https://7.dusays.com/2020/11/02/b90051e64945c.png","https://7.dusays.com/2020/11/02/aaf4c0ab57032.png","https://7.dusays.com/2020/11/02/4a7759227aae9.png"],"content":"<p><img src=\"/images/css.png\"></p>\n<h1 id=\"一、常见定位方案\"><a href=\"#一、常见定位方案\" class=\"headerlink\" title=\"一、常见定位方案\"></a>一、常见定位方案</h1><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p>\n<ul>\n<li>普通流 (normal flow)<br>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</li>\n<li>浮动 (float)<br>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</li>\n<li>绝对定位 (absolute positioning)<br>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</li>\n</ul>\n<h1 id=\"二、BFC-概念\"><a href=\"#二、BFC-概念\" class=\"headerlink\" title=\"二、BFC 概念\"></a>二、BFC 概念</h1><blockquote>\n<p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n</blockquote>\n<p>那么 BFC 是什么呢？</p>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。<br>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。<br>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<h1 id=\"三、触发-BFC\"><a href=\"#三、触发-BFC\" class=\"headerlink\" title=\"三、触发 BFC\"></a>三、触发 BFC</h1><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<h1 id=\"四、BFC-特性及应用\"><a href=\"#四、BFC-特性及应用\" class=\"headerlink\" title=\"四、BFC 特性及应用\"></a>四、BFC 特性及应用</h1><h2 id=\"1-同一个-BFC-下外边距会发生折叠\"><a href=\"#1-同一个-BFC-下外边距会发生折叠\" class=\"headerlink\" title=\"1. 同一个 BFC 下外边距会发生折叠\"></a>1. 同一个 BFC 下外边距会发生折叠</h2><pre><code>&lt;head&gt;\ndiv{\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。<br><img src=\"https://7.dusays.com/2020/11/02/0afee71e5de5e.png\"></p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p>\n<pre><code>\n&lt;div class=\"container\"&gt;\n    &lt;p&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"container\"&gt;\n    &lt;p&gt;&lt;/p&gt;\n&lt;/div&gt;\n\n.container {\n    overflow: hidden;\n}\np {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n}\n</code></pre>\n<p>这时候，两个盒子边距就变成了 200px </p>\n<p><img src=\"https://7.dusays.com/2020/11/02/0e302d5bce868.png\"></p>\n<h2 id=\"2-BFC-可以包含浮动的元素（清除浮动）\"><a href=\"#2-BFC-可以包含浮动的元素（清除浮动）\" class=\"headerlink\" title=\"2. BFC 可以包含浮动的元素（清除浮动）\"></a>2. BFC 可以包含浮动的元素（清除浮动）</h2><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p>\n<pre><code>&lt;div style=\"border: 1px solid #000;\"&gt;\n    &lt;div style=\"width: 100px;height: 100px;background: #eee;float: left;\"&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p><img src=\"https://7.dusays.com/2020/11/02/f461d5e0dbd0f.png\"></p>\n<p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</p>\n<pre><code>&lt;div style=\"border: 1px solid #000;overflow: hidden\"&gt;\n    &lt;div style=\"width: 100px;height: 100px;background: #eee;float: left;\"&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>效果如图：</p>\n<p><img src=\"https://7.dusays.com/2020/11/02/b90051e64945c.png\"></p>\n<h2 id=\"3-BFC-可以阻止元素被浮动元素覆盖\"><a href=\"#3-BFC-可以阻止元素被浮动元素覆盖\" class=\"headerlink\" title=\"3. BFC 可以阻止元素被浮动元素覆盖\"></a>3. BFC 可以阻止元素被浮动元素覆盖</h2><p>先来看一个文字环绕效果：</p>\n<pre><code>&lt;div style=\"height: 100px;width: 100px;float: left;background: lightblue\"&gt;\n    我是一个左浮动的元素\n&lt;/div&gt;\n&lt;div style=\"width: 200px; height: 200px;background: #eee\"&gt;\n    我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;\n&lt;/div&gt;\n</code></pre>\n<p><img src=\"https://7.dusays.com/2020/11/02/aaf4c0ab57032.png\"></p>\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：</p>\n<p><img src=\"https://7.dusays.com/2020/11/02/4a7759227aae9.png\"></p>\n<p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>\n","more":"<p><img src=\"/images/css.png\"></p>\n<h1 id=\"一、常见定位方案\"><a href=\"#一、常见定位方案\" class=\"headerlink\" title=\"一、常见定位方案\"></a>一、常见定位方案</h1><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p>\n<ul>\n<li>普通流 (normal flow)<br>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。</li>\n<li>浮动 (float)<br>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。</li>\n<li>绝对定位 (absolute positioning)<br>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。</li>\n</ul>\n<h1 id=\"二、BFC-概念\"><a href=\"#二、BFC-概念\" class=\"headerlink\" title=\"二、BFC 概念\"></a>二、BFC 概念</h1><blockquote>\n<p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>\n</blockquote>\n<p>那么 BFC 是什么呢？</p>\n<p>BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。<br>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。<br>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<h1 id=\"三、触发-BFC\"><a href=\"#三、触发-BFC\" class=\"headerlink\" title=\"三、触发 BFC\"></a>三、触发 BFC</h1><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<h1 id=\"四、BFC-特性及应用\"><a href=\"#四、BFC-特性及应用\" class=\"headerlink\" title=\"四、BFC 特性及应用\"></a>四、BFC 特性及应用</h1><h2 id=\"1-同一个-BFC-下外边距会发生折叠\"><a href=\"#1-同一个-BFC-下外边距会发生折叠\" class=\"headerlink\" title=\"1. 同一个 BFC 下外边距会发生折叠\"></a>1. 同一个 BFC 下外边距会发生折叠</h2><pre><code>&lt;head&gt;\ndiv&#123;\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n&#125;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。<br><img src=\"https://7.dusays.com/2020/11/02/0afee71e5de5e.png\"></p>\n<p>首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</p>\n<pre><code>\n&lt;div class=&quot;container&quot;&gt;\n    &lt;p&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=&quot;container&quot;&gt;\n    &lt;p&gt;&lt;/p&gt;\n&lt;/div&gt;\n\n.container &#123;\n    overflow: hidden;\n&#125;\np &#123;\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    margin: 100px;\n&#125;\n</code></pre>\n<p>这时候，两个盒子边距就变成了 200px </p>\n<p><img src=\"https://7.dusays.com/2020/11/02/0e302d5bce868.png\"></p>\n<h2 id=\"2-BFC-可以包含浮动的元素（清除浮动）\"><a href=\"#2-BFC-可以包含浮动的元素（清除浮动）\" class=\"headerlink\" title=\"2. BFC 可以包含浮动的元素（清除浮动）\"></a>2. BFC 可以包含浮动的元素（清除浮动）</h2><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p>\n<pre><code>&lt;div style=&quot;border: 1px solid #000;&quot;&gt;\n    &lt;div style=&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p><img src=\"https://7.dusays.com/2020/11/02/f461d5e0dbd0f.png\"></p>\n<p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</p>\n<pre><code>&lt;div style=&quot;border: 1px solid #000;overflow: hidden&quot;&gt;\n    &lt;div style=&quot;width: 100px;height: 100px;background: #eee;float: left;&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>效果如图：</p>\n<p><img src=\"https://7.dusays.com/2020/11/02/b90051e64945c.png\"></p>\n<h2 id=\"3-BFC-可以阻止元素被浮动元素覆盖\"><a href=\"#3-BFC-可以阻止元素被浮动元素覆盖\" class=\"headerlink\" title=\"3. BFC 可以阻止元素被浮动元素覆盖\"></a>3. BFC 可以阻止元素被浮动元素覆盖</h2><p>先来看一个文字环绕效果：</p>\n<pre><code>&lt;div style=&quot;height: 100px;width: 100px;float: left;background: lightblue&quot;&gt;\n    我是一个左浮动的元素\n&lt;/div&gt;\n&lt;div style=&quot;width: 200px; height: 200px;background: #eee&quot;&gt;\n    我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;\n&lt;/div&gt;\n</code></pre>\n<p><img src=\"https://7.dusays.com/2020/11/02/aaf4c0ab57032.png\"></p>\n<p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：</p>\n<p><img src=\"https://7.dusays.com/2020/11/02/4a7759227aae9.png\"></p>\n<p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p>\n","categories":[{"name":"前端基础","path":"api/categories/前端基础.json"}],"tags":[{"name":"css","path":"api/tags/css.json"}]}