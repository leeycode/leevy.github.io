{"title":"从零开始搭建一个vue2+webpack5模板","slug":"从零开始搭建一个vue2-webpack5模板","date":"2023-08-19T06:52:44.000Z","updated":"2023-08-19T07:10:29.095Z","comments":true,"path":"api/articles/从零开始搭建一个vue2-webpack5模板.json","excerpt":null,"covers":["https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8baef760feaa4f829381340d9b06fc74~tplv-k3u1fbpfcp-watermark.image"],"content":"<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>从不同阶段的角度来划分，不同的阶段所需要的功能不同，因此整体构建可划分为：本地开发阶段、生产部署阶段</p>\n<blockquote>\n<p>开发阶段: 需要本地启动服务器环境，支持代码即时预览、模块热更新、devtool调试功能等；</p>\n</blockquote>\n<blockquote>\n<p>生产部署阶段: 需要开启压缩优化、静态资源复制目录、代码tree shaking、chunk抽离等功能；阶段不同所需功能不同。</p>\n</blockquote>\n<p>不同阶段所需功能不同，但工具的基础能力一致，因此可将整体构建拆分为如下结构：</p>\n<ul>\n<li><p>基础通用功能</p>\n<ul>\n<li>entry 入口配置</li>\n<li>output 输出配置</li>\n<li>resolve 自动文件识别与简化路径配置</li>\n<li>externals 排除指定依赖而减小打包体积的外部拓展配置</li>\n<li>module-loader 以loader转换非js模块配置</li>\n<li>plugins 全局变量、页面模板、语法工具等插件配置</li>\n<li>optimization 模块抽取等性能相关配置</li>\n<li>其他相关配置</li>\n</ul>\n</li>\n<li><p>开发阶段配置</p>\n<ul>\n<li>dev server 本地服务器配置</li>\n<li>devtool 开发调试配置</li>\n<li>proxy 接口代理转发配置</li>\n<li>hot HMR模块热更新配置</li>\n<li>compress gzip等压缩优化配置</li>\n<li>router historyApiFallback本地路由重定向配置</li>\n<li>optimization 模块名称chunkIds配置</li>\n</ul>\n</li>\n<li><p>生产部署阶段</p>\n<ul>\n<li>清理dist目录</li>\n<li>复制静态资源</li>\n<li>css单独拆包</li>\n<li>css/js丑化压缩</li>\n<li>作用域提升</li>\n<li>tree shaking</li>\n<li>代码拆分</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构建具体实现\"><a href=\"#构建具体实现\" class=\"headerlink\" title=\"构建具体实现\"></a>构建具体实现</h2><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p>预定使用以下目录结构<br>一个vue2+webpack5项目的目录结构（<a href=\"https://github.com/leeycode/vue2-webpack5-template/\">vue2-webpack5-template</a>）：</p>\n<pre><code>├── /config/                     # webpack配置文件\n│ ├── /paths.js/                 # 编译路径\n│ ├── /webpack.common.js/        # 基础通用配置\n│ ├── /webpack.config.js/        # 主构建配置\n│ ├── /webpack.dev.js/           # 开发环境配置\n│ ├── /webpack.prod.js/          # 生产环境配置\n├── /src/                        # 源码目录\n│ ├── /assets/                   # 静态资源目录\n│ ├── /components/               # 公共组件目录\n│ ├── /constants/                # 项目constants目录\n│ │ ├── _const.less              # less常量\n│ ├── /pages/                    # UI组件目录\n│ ├── /services/                 # 请求服务目录\n│ ├── /router/                   # 路由目录\n│ ├── /store/                    # 存放store文件目录\n│ ├── /style/                    # 全局样式\n│ ├── /utils/                    # utils目录\n│ │ ├── request.js               # 基于fetch封装的API请求工具\n│ │ ├── global.js                # 公共方法库\n│ └── main.js                    # 项目入口\n│ └── App.vue                    # 项目主页面\n|——eslintrc.js                   # 代码风格配置文件\n|——babel.config.js               # 工具babel转换配置，设置预设等\n|——postcss.config.js             # css样式转换配置\n|——package.json                  # 依赖包等信息配置文件</code></pre>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8baef760feaa4f829381340d9b06fc74~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"基础通用功能\"><a href=\"#基础通用功能\" class=\"headerlink\" title=\"基础通用功能\"></a>基础通用功能</h3><p>项目打包需要依赖webpack且需要在命令行执行，因此先行安装webpck、webpack-cli到开发依赖</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i webpack webpack<span class=\"token operator\">-</span>cli <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>安装完毕后在webpack.common.js中增加通用配置</p>\n<h4 id=\"entry-入口配置\"><a href=\"#entry-入口配置\" class=\"headerlink\" title=\"entry 入口配置\"></a>entry 入口配置</h4><pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/main.js'</span> <span class=\"token comment\" spellcheck=\"true\">// 默认是此目录，如若文件名称或者入口变更可修改</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"output-输出配置\"><a href=\"#output-输出配置\" class=\"headerlink\" title=\"output 输出配置\"></a>output 输出配置</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolveApp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./paths'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token function\">resolveApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'js/[name].[hash:6].js'</span><span class=\"token punctuation\">,</span>\n        chunkFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'js/[name].chunk.[hash:4].js'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>paths.js文件内容</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// webpack内置模块</span>\n\n<span class=\"token keyword\">const</span> appRoot <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 命令行运行的根目录</span>\n\n<span class=\"token keyword\">const</span> resolveApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>resolvePath<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>appRoot<span class=\"token punctuation\">,</span> resolvePath<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 获取指定目录的完整绝对路径</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> resolveApp</code></pre>\n<p>path：文件输出到dist目录中，根目录路径的获取通过命令行终端函数获取</p>\n<p>filename：构建后的脚本文件输出到js目录下，且使用动态文件名称，附带文件6为hash值</p>\n<p>chunkFilename：构建时拆分出来的chunk文件同样放入js目录下，且名称除了以上规则外，增加chunk标识</p>\n<h4 id=\"resolve-路径简化配置\"><a href=\"#resolve-路径简化配置\" class=\"headerlink\" title=\"resolve 路径简化配置\"></a>resolve 路径简化配置</h4><p>在模块源码中，通过import加载其他模块时需要写出其前缀目录地址，如若嵌套较深则会书写麻烦，此时可以配置特定路径标识映射，以简化此路径。</p>\n<p>同时，导入其他模块时默认在文件末尾增加js文件格式结尾，其他文件格式会无法找到，配置自动补全规则来增加其他文件格式补全</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'@'</span><span class=\"token punctuation\">:</span> <span class=\"token function\">resolveApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>resolve：通过<code>extensions</code>配置自动补全的文件类型</p>\n<p>resolve：通过<code>alias</code>配置简化路径的映射标识</p>\n<h4 id=\"externals-外部拓展\"><a href=\"#externals-外部拓展\" class=\"headerlink\" title=\"externals 外部拓展\"></a>externals 外部拓展</h4><p>外部依赖的库文件如若较大且不会频繁变动，则可将库文件的导入交给外部，如使用外链形式走cdn加速、构建dll库或其他形式，通过html页面增加script脚本引入库文件</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    externals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 不希望依赖打进包中，走外链cdn等</span>\n        <span class=\"token comment\" spellcheck=\"true\">// '$': 'Jquery',</span>\n        <span class=\"token comment\" spellcheck=\"true\">// vue: 'Vue',</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 'vuex': 'Vuex',</span>\n        <span class=\"token comment\" spellcheck=\"true\">// moment: 'moment',</span>\n        <span class=\"token comment\" spellcheck=\"true\">// antd: 'antd',</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"module-loader配置\"><a href=\"#module-loader配置\" class=\"headerlink\" title=\"module loader配置\"></a>module loader配置</h4><h5 id=\"为什么要用loader\"><a href=\"#为什么要用loader\" class=\"headerlink\" title=\"为什么要用loader\"></a>为什么要用loader</h5><p>1.webpack默认只能处理js文件，而我们项目中不可避免要用到样式表css、图片imgage、字体font等资源，而这类的资源文件webpack并不认识，因此无法直接处理</p>\n<p>2.js模块中我们会用到最新的ES6+语法，也可能会用到coffee script语法，或者严谨的typescript语法等，这些语法在浏览器环境中支持程度不一，或不支持直接解析。</p>\n<p>基于以上种种原因，我们需要通过loader加载器来将这类资源文件转换为可以被识别并解析的标准js</p>\n<h5 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h5><ul>\n<li>vue-loader</li>\n</ul>\n<p>安装</p>\n<p>先安装vue到项目依赖，再安装vue-loader、vue-template-compiler到开发依赖</p>\n<p>vue-template-compiler 的作用是将vue的模板代码预编译为渲染函数，以避免在运行时编译开销</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i vue <span class=\"token operator\">--</span>save\nnpm i vue<span class=\"token operator\">-</span>loader vue<span class=\"token operator\">-</span>template<span class=\"token operator\">-</span>compiler <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>使用</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> VueLoaderPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-loader/lib/plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.vue$/</span><span class=\"token punctuation\">,</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token string\">'vue-loader'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>安装完毕后rules内添加相应规则，检测vue结尾的文件，并使用vue-loader。同时要求单独导出vueLoaderPlugin，在plugins插件集合内实例化，以此来正确解析vue文件</p>\n<ul>\n<li>css-loader</li>\n</ul>\n<p>对于样式表css的处理和其他vue、js处理不同，样式表css处理需要经过多步骤处理后才能正常使用，具体流程为：</p>\n<p>1.使用postcss-loader将css文件内样式根据浏览器支持情况转换为多平台兼容写法，如使用autoprefixer、browserslist、caniuse-lite等依赖增加平台特性写法；</p>\n<p>2.接着将转换后的样式表css交由css-loader处理import、url等行为，将引入和依赖的外部资源加载到当前样式表中；</p>\n<p>3.处理完毕后将css交由style-loader，已style标签的形式注入html页面中</p>\n<p>这里存在一个问题，开发环境时将css全部注入页面没有影响，但生产环境会是多文件大量内容，超出量后会导致首页加载变慢。因此需要在生产阶段将css单独抽离出文件，通过判断环境来加载相应配置,将module.exports导出内容变更为函数，接受环境标识</p>\n<p>安装loader</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i postcss<span class=\"token operator\">-</span>loader css<span class=\"token operator\">-</span>loader style<span class=\"token operator\">-</span>loader <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>安装插件plugin</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i mini<span class=\"token operator\">-</span>css<span class=\"token operator\">-</span>extract<span class=\"token operator\">-</span>plugin <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>使用</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cssFinalLoader <span class=\"token operator\">=</span> isProduction <span class=\"token operator\">?</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader <span class=\"token punctuation\">:</span> <span class=\"token string\">'style-loader'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n              use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                cssFinalLoader<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 开发与生产使用不同loader</span>\n                <span class=\"token punctuation\">{</span>\n                  loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    esModule<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// css不使用esModule，直接输出</span>\n                    importLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\" spellcheck=\"true\">// 使用本loader前使用1个其他处理器</span>\n                  <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'postcss-loader'</span>\n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              sideEffects<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\" spellcheck=\"true\">// 希望保留副作用</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>  前边提到了postcss-loader会根据支持度情况自动转换css内容，postcss-loader作为转换的一个平台，会提供插槽的能力，但是转换的具体规则并不会去做，因此这个转换规则需要我们通过其他插件解决。这里我们使用一个预设的转换集合<code>postcss-preset-env</code></p>\n<p>安装</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i postcss<span class=\"token operator\">-</span>preset<span class=\"token operator\">-</span>env <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>使用</p>\n<p>postcss.config.js文件</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-preset-env'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>less-loader</li>\n</ul>\n<p>less-loader与css-loader处理逻辑相似，区别为：处理前需要先使用less-loader将less文件处理为css文件，处理less文件依赖less包。</p>\n<p>安装</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i less less<span class=\"token operator\">-</span>loader <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>配置</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> cssFinalLoader <span class=\"token operator\">=</span> isProduction <span class=\"token operator\">?</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader <span class=\"token punctuation\">:</span> <span class=\"token string\">'style-loader'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.less$/</span><span class=\"token punctuation\">,</span>\n              use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                cssFinalLoader<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                  loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                    importLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n                  <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'less-loader'</span>\n              <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>图片-loader</li>\n</ul>\n<p>在webpack4版本中，图片类资源是通过file-loader和url-loader来配合实现。但webpack5版本中官方内置了asset来处理静态资源类。</p>\n<p>配置</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|gif|jpe?g|svg)$/</span><span class=\"token punctuation\">,</span>\n              type<span class=\"token punctuation\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// webpack5使用内置静态资源模块，且不指定具体，根据以下规则使用</span>\n              generator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'img/[name].[hash:6][ext]'</span> <span class=\"token comment\" spellcheck=\"true\">// ext本身会附带点，放入img目录下</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              parser<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                dataUrlCondition<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                  maxSize<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\" spellcheck=\"true\">// 超过10kb的进行复制，不超过则直接使用base64</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>font 字体类loader</li>\n</ul>\n<p>配置</p>\n<p>与图片类资源处理相似，但去除了大小限制，因字体文件是整体，且无需额外处理，因此直接进行静态资源复制</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(ttf|woff2?|eot)$/</span><span class=\"token punctuation\">,</span>\n              type<span class=\"token punctuation\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 指定静态资源类复制</span>\n              generator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'font/[name].[hash:6][ext]'</span> <span class=\"token comment\" spellcheck=\"true\">// 放入font目录下</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>      </code></pre>\n<ul>\n<li>babel-loader</li>\n</ul>\n<p>js模块的转换操作需要依赖babel-loader，与postcss-loader类似，babel-loader也可以理解为一个转换的平台，并不做具体转换规则，因此需要依赖<code>@babel/core</code>、<code>@babel/preset-env</code>、<code>@vue/cli-plugin-babel</code>插件来完成转换</p>\n<p>安装</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i @babel<span class=\"token operator\">/</span>core @babel<span class=\"token operator\">/</span>preset<span class=\"token operator\">-</span>env @vue<span class=\"token operator\">/</span>cli<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>babel <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>配置</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.jsx?$/</span><span class=\"token punctuation\">,</span>\n              exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 过滤掉node_modules目录，只使用而已</span>\n              use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span> <span class=\"token comment\" spellcheck=\"true\">// js、jsx使用bable-loader处理</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>进行语法转换的时候需要排除掉node_modules目录</p>\n<p>babel.config.js文件</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'@vue/cli-plugin-babel/preset'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      useBuiltIns<span class=\"token punctuation\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 用到什么填充什么，按需</span>\n      corejs<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\" spellcheck=\"true\">// 默认是2版本</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>eslint-loader</li>\n</ul>\n<p>代码风格检查</p>\n<p>安装</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i eslint eslint<span class=\"token operator\">-</span>loader <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>配置</p>\n<pre class=\" language-js\"><code class=\"language-js\">npx eslint <span class=\"token operator\">--</span>init <span class=\"token comment\" spellcheck=\"true\">// 根据提示完成配置，详情见webpack打包-上</span></code></pre>\n<p>执行完毕后会安装相关依赖和生成<code>.eslintrc.js</code>配置文件</p>\n<p>.eslintrc.js</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  env<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    browser<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    es2021<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'plugin:vue/essential'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'standard'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n    sourceType<span class=\"token punctuation\">:</span> <span class=\"token string\">'module'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'vue'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"plugins-配置\"><a href=\"#plugins-配置\" class=\"headerlink\" title=\"plugins 配置\"></a>plugins 配置</h4><p>基础功能内提供全局变量定义、页面模板、vue相关plugin等配置</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            BASE_URL<span class=\"token punctuation\">:</span> <span class=\"token string\">'\"./\"'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'vue2-webpack5-anted'</span><span class=\"token punctuation\">,</span>\n            template<span class=\"token punctuation\">:</span> <span class=\"token string\">'public/index.html'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DefinePlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> TerserWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> VueLoaderPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vue-loader/lib/plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> resolveApp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./paths'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cssFinalLoader <span class=\"token operator\">=</span> isProduction <span class=\"token operator\">?</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader <span class=\"token punctuation\">:</span> <span class=\"token string\">'style-loader'</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/main.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token function\">resolveApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'js/[name].[hash:6].js'</span><span class=\"token punctuation\">,</span>\n      chunkFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'js/[name].chunk.[hash:4].js'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'@'</span><span class=\"token punctuation\">:</span> <span class=\"token function\">resolveApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    externals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 不希望依赖打进包中，走外链cdn等</span>\n      <span class=\"token comment\" spellcheck=\"true\">// '$': 'Jquery',</span>\n      <span class=\"token comment\" spellcheck=\"true\">// react: 'React',</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 'react-dom': 'ReactDOM',</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 'prop-types': 'PropTypes',</span>\n      <span class=\"token comment\" spellcheck=\"true\">// moment: 'moment',</span>\n      <span class=\"token comment\" spellcheck=\"true\">// antd: 'antd',</span>\n      <span class=\"token comment\" spellcheck=\"true\">// classnames: 'classNames',</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\" spellcheck=\"true\">// vue文件处理</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.vue$/</span><span class=\"token punctuation\">,</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token string\">'vue-loader'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// less文件处理</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.less$/</span><span class=\"token punctuation\">,</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            cssFinalLoader<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n              options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                importLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'less-loader'</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// css文件处理</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            cssFinalLoader<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 最终要以style标签输出到页面</span>\n            <span class=\"token punctuation\">{</span>\n              loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n              options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                esModule<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// css不使用esModule，直接输出</span>\n                importLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\" spellcheck=\"true\">// 使用本loader前使用1个其他处理器</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'postcss-loader'</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          sideEffects<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\" spellcheck=\"true\">// 希望保留副作用</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 图片类处理</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(png|gif|jpe?g|svg)$/</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// webpack5使用内置静态资源模块，且不指定具体，根据以下规则 使用</span>\n          generator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'img/[name].[hash:6][ext]'</span> <span class=\"token comment\" spellcheck=\"true\">// ext本身会附带 点，放入img目录下</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          parser<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            dataUrlCondition<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              maxSize<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token comment\" spellcheck=\"true\">// 超过10kb的进行复制，不超过则直接使用base64</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 字体类处理</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(ttf|woff2?|eot)$/</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token punctuation\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 指定静态资源类复制</span>\n          generator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'font/[name].[hash:6][ext]'</span> <span class=\"token comment\" spellcheck=\"true\">// 放入font目录下</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 脚本类处理</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.jsx?$/</span><span class=\"token punctuation\">,</span>\n          exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 过滤掉node_modules目录，只使用而已</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span> <span class=\"token comment\" spellcheck=\"true\">// js、jsx使用bable-loader处理</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(vue|js)$/</span><span class=\"token punctuation\">,</span>\n          use<span class=\"token punctuation\">:</span> <span class=\"token string\">'eslint-loader'</span><span class=\"token punctuation\">,</span>\n          exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n          enforce<span class=\"token punctuation\">:</span> <span class=\"token string\">'pre'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        BASE_URL<span class=\"token punctuation\">:</span> <span class=\"token string\">'\"./\"'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'贾贵山-自建构建打包流程'</span><span class=\"token punctuation\">,</span>\n        template<span class=\"token punctuation\">:</span> <span class=\"token string\">'public/index.html'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    optimization<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      runtimeChunk<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 模块抽取，利用浏览器缓存</span>\n      minimizer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          extractComments<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\" spellcheck=\"true\">// 不要注释生成的文件</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"开发阶段配置\"><a href=\"#开发阶段配置\" class=\"headerlink\" title=\"开发阶段配置\"></a>开发阶段配置</h3><p>因开发环境在通用配置基础上配置，因此直接展示完整示例，对相应配置进行说明</p>\n<p>安装</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i webpack<span class=\"token operator\">-</span>merge webpack<span class=\"token operator\">-</span>dev<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</code></pre>\n<p>配置</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.common'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">baseConfig</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token punctuation\">:</span> <span class=\"token string\">'cheap-module-source-map'</span><span class=\"token punctuation\">,</span>\n  target<span class=\"token punctuation\">:</span> <span class=\"token string\">'web'</span><span class=\"token punctuation\">,</span>\n  devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    hot<span class=\"token punctuation\">:</span> <span class=\"token string\">'only'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">3002</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 端口号，工作中从3001开始，因此增加1个到3002</span>\n    open<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 自动打开浏览器</span>\n    compress<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 开启gzip压缩</span>\n    historyApiFallback<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// history路径在刷新出错时重定向开启</span>\n    proxy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 接口代理</span>\n      <span class=\"token string\">'/api'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 统一api前缀都代理掉</span>\n        target<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://api.github.com'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 代理的目标地址</span>\n        changeOrigin<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 改变来源信息</span>\n        pathRewrite<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 因前缀为自己增加，因此重写地址</span>\n          <span class=\"token string\">'/api'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token comment\" spellcheck=\"true\">// 将前缀去掉</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  optimization<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    chunkIds<span class=\"token punctuation\">:</span> <span class=\"token string\">'named'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>使用 <code>webpack-merge</code> 包进行配置合并</li>\n<li>mode: 指定当前模式为开发模式 <code>development</code></li>\n<li>devtool: 指定生成source map，且规则模式为 <code>cheap-module-source-map</code></li>\n<li>target: 指定目标为web平台</li>\n<li>devServer: 本地服务环境配置对象<ul>\n<li>hot: 开启热更新</li>\n<li>port: 本地服务的端口号为3002，可任意更改</li>\n<li>open: 服务启动后自动打开浏览器，默认为true</li>\n<li>compress: 压缩模式</li>\n<li>historyApiFallback: history模式访问时如路由不存在则重定向到首页</li>\n<li>proxy: 请求代理<ul>\n<li>‘/api’: 代理的请求点缀</li>\n<li>target: 将要代理到的目标地址</li>\n<li>changeOrigin: 是否更改来源信息</li>\n<li>pathRewrite: 重写配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"生产阶段配置\"><a href=\"#生产阶段配置\" class=\"headerlink\" title=\"生产阶段配置\"></a>生产阶段配置</h3><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> baseConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.common'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> CopyWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CleanWebpackPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> CssMinimizerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-minimizer-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> PurgeCSSPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'purgecss-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> resolveApp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./paths'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> CompressionPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// var InlineChunkHtmlPlugin = require('inline-chunk-html-plugin');</span>\n<span class=\"token comment\" spellcheck=\"true\">// const HtmlWebpackPlugin = require('html-webpack-plugin');</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">baseConfig</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      patterns<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span>\n        to<span class=\"token punctuation\">:</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span>\n        globOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          ignore<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'**/index.html'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// css单独拆分为文件</span>\n      filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'css/[name].[hash:6].css'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>ModuleConcatenationPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 作用域提升，提升性能</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">PurgeCSSPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      paths<span class=\"token punctuation\">:</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">resolveApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/**/*`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> nodir<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(css|js)$/i</span><span class=\"token punctuation\">,</span>\n      algorithm<span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">// new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime/]) // 将一定大小文件直接注入 html,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  optimization<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    chunkIds<span class=\"token punctuation\">:</span> <span class=\"token string\">'deterministic'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 文件名称尽可能短，也会是序号类型</span>\n    splitChunks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      chunks<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span>\n      minSize<span class=\"token punctuation\">:</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 拆分的每个包不小于20kb</span>\n      maxSize<span class=\"token punctuation\">:</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 体积大于设置的值的包要去拆分开包</span>\n      minChunks<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 包如果要拆分，则必须要至少引用一次</span>\n      cacheGroups<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        syVendors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/[\\\\/]node_modules[\\\\/]/</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 对目录内文件进行单独打包拆分，且放入一个文件中 vender</span>\n          filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'js/[id]_verdor.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 最终名字</span>\n          priority<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token comment\" spellcheck=\"true\">// 都满足时候的优先级，越高月用</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    minimizer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CssMinimizerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>生产环境依然采用合并基础配置方式</p>\n<ul>\n<li>mode: 此时采用 <code>production</code>模式</li>\n<li>plugins: 生产阶段使用的plugins列表<ul>\n<li>CleanWebpackPlugin 清除dist目录插件</li>\n<li>CopyWebpackPlugin 静态资源目录复制插件</li>\n<li>MiniCssExtractPlugin 单独拆分出css包</li>\n<li>ModuleConcatenationPlugin 将js的作用域提升，减少作用域层级来提升性能</li>\n<li>PurgeCSSPlugin 摇掉未使用的css</li>\n<li>CompressionPlugin 采用gzip形式押错css和js</li>\n<li>optimization 生产环境优化配置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"构建入口配置\"><a href=\"#构建入口配置\" class=\"headerlink\" title=\"构建入口配置\"></a>构建入口配置</h3><pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> devConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.dev'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> prodConfig <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack.prod'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// const SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\");</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// const smp = new SpeedMeasurePlugin();</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// const finalResult = env.production ? prodConfig : devConfig;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// console.log('final---->', finalResult)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// return smp.wrap(finalResult);</span>\n  <span class=\"token keyword\">return</span> env<span class=\"token punctuation\">.</span>production <span class=\"token operator\">?</span> prodConfig <span class=\"token punctuation\">:</span> devConfig\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>构建时减少繁琐修改配置文件的操作，在package.json内添加启动参数来选择不同环境配置</p>\n<h3 id=\"打包速度优化\"><a href=\"#打包速度优化\" class=\"headerlink\" title=\"打包速度优化\"></a>打包速度优化</h3><p>优化效率工具<br>安装以下 webpack 插件，帮助我们分析优化效率：</p>\n<ol>\n<li>progress-bar-webpack-plugin：查看编译进度；</li>\n<li>speed-measure-webpack-plugin：查看编译速度；</li>\n<li>webpack-bundle-analyzer：打包体积分析。</li>\n</ol>\n<h4 id=\"编译进度条\"><a href=\"#编译进度条\" class=\"headerlink\" title=\"编译进度条\"></a>编译进度条</h4><p>一般来说，中型项目的首次编译时间为 5-20s，没个进度条等得多着急，通过 progress-bar-webpack-plugin 插件查看编译进度，方便我们掌握编译情况。</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i <span class=\"token operator\">-</span>D progress<span class=\"token operator\">-</span>bar<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin</code></pre>\n<p>webpack.common.js 配置方式如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chalk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chalk'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> ProgressBarPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'progress-bar-webpack-plugin'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 进度条 贴心的为进度百分比添加了加粗和绿色高亮态样式。</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProgressBarPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        format<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`  :msg [:bar] </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chalk<span class=\"token punctuation\">.</span>green<span class=\"token punctuation\">.</span><span class=\"token function\">bold</span><span class=\"token punctuation\">(</span><span class=\"token string\">':percent'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (:elapsed s)`</span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"编译速度分析\"><a href=\"#编译速度分析\" class=\"headerlink\" title=\"编译速度分析\"></a>编译速度分析</h4><p>优化 webpack 构建速度，首先需要知道是哪些插件、哪些 loader 耗时长，方便我们针对性的优化。</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i speed<span class=\"token operator\">-</span>measure<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin <span class=\"token operator\">-</span>D</code></pre>\n<p>webpack.pro.js 配置方式如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> SpeedMeasurePlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speed-measure-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> smp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeedMeasurePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> smp<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ...webpack config...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"打包体积分析\"><a href=\"#打包体积分析\" class=\"headerlink\" title=\"打包体积分析\"></a>打包体积分析</h4><p>使用 webpack-bundle-analyzer 查看打包后生成的 bundle 体积分析，将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。帮助我们分析输出结果来检查模块在何处结束。</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i <span class=\"token operator\">-</span>D webpack<span class=\"token operator\">-</span>bundle<span class=\"token operator\">-</span>analyzer</code></pre>\n<p>webpack.prod.js 配置方式如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> BundleAnalyzerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-bundle-analyzer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>BundleAnalyzerPlugin<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 打包体积分析</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">BundleAnalyzerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"第三方包优化\"><a href=\"#第三方包优化\" class=\"headerlink\" title=\"第三方包优化\"></a>第三方包优化</h3><h4 id=\"ant-design-vue\"><a href=\"#ant-design-vue\" class=\"headerlink\" title=\"ant-design-vue\"></a>ant-design-vue</h4><pre class=\" language-js\"><code class=\"language-js\">npm i <span class=\"token operator\">--</span>save ant<span class=\"token operator\">-</span>design<span class=\"token operator\">-</span>vue@<span class=\"token number\">1.7</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span>\nnpm i babel<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span><span class=\"token keyword\">import</span> <span class=\"token operator\">-</span>D</code></pre>\n<p>官方有对其配置按需加载功能，但是在实际使用用过程中，很多没有使用的组件还是被打包进了项目，主要集中在@ant-design/icons、moment上，占用了很大的体积。</p>\n<p>babel.config.js中：</p>\n<pre class=\" language-js\"><code class=\"language-js\">plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>ant<span class=\"token operator\">-</span>design<span class=\"token operator\">-</span>vue按需加载配置<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'import'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> libraryName<span class=\"token punctuation\">:</span> <span class=\"token string\">'ant-design-vue'</span><span class=\"token punctuation\">,</span> libraryDirectory<span class=\"token punctuation\">:</span> <span class=\"token string\">'es'</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">:</span> <span class=\"token string\">'css'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'ant-design-vue'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>lodash按需加载配置<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token string\">'lodash'</span>\n  <span class=\"token punctuation\">]</span></code></pre>\n<h4 id=\"moment\"><a href=\"#moment\" class=\"headerlink\" title=\"moment\"></a>moment</h4><p>moment的locale占了很大一部分，这也是我目前不需要用到的，所以我可以借用moment-locales-webpack-plugin插件移除moment中未用到的代码，先来安装它：</p>\n<pre class=\" language-js\"><code class=\"language-js\">npm i moment<span class=\"token operator\">-</span>locales<span class=\"token operator\">-</span>webpack<span class=\"token operator\">-</span>plugin <span class=\"token operator\">-</span>D</code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// webpack.common.js</span>\n<span class=\"token keyword\">const</span> MomentLocalesPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moment-locales-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  plugin<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MomentLocalesPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h3><pre class=\" language-js\"><code class=\"language-js\">npm install\nnpm run serve\nnpm run build</code></pre>\n<p>本地开发则启动 <code>npm run serve</code><br>构建生产环境则 <code>npm run build</code><br>检查代码风格则 <code>npm run lint</code></p>\n","more":"<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>从不同阶段的角度来划分，不同的阶段所需要的功能不同，因此整体构建可划分为：本地开发阶段、生产部署阶段</p>\n<blockquote>\n<p>开发阶段: 需要本地启动服务器环境，支持代码即时预览、模块热更新、devtool调试功能等；</p>\n</blockquote>\n<blockquote>\n<p>生产部署阶段: 需要开启压缩优化、静态资源复制目录、代码tree shaking、chunk抽离等功能；阶段不同所需功能不同。</p>\n</blockquote>\n<p>不同阶段所需功能不同，但工具的基础能力一致，因此可将整体构建拆分为如下结构：</p>\n<ul>\n<li><p>基础通用功能</p>\n<ul>\n<li>entry 入口配置</li>\n<li>output 输出配置</li>\n<li>resolve 自动文件识别与简化路径配置</li>\n<li>externals 排除指定依赖而减小打包体积的外部拓展配置</li>\n<li>module-loader 以loader转换非js模块配置</li>\n<li>plugins 全局变量、页面模板、语法工具等插件配置</li>\n<li>optimization 模块抽取等性能相关配置</li>\n<li>其他相关配置</li>\n</ul>\n</li>\n<li><p>开发阶段配置</p>\n<ul>\n<li>dev server 本地服务器配置</li>\n<li>devtool 开发调试配置</li>\n<li>proxy 接口代理转发配置</li>\n<li>hot HMR模块热更新配置</li>\n<li>compress gzip等压缩优化配置</li>\n<li>router historyApiFallback本地路由重定向配置</li>\n<li>optimization 模块名称chunkIds配置</li>\n</ul>\n</li>\n<li><p>生产部署阶段</p>\n<ul>\n<li>清理dist目录</li>\n<li>复制静态资源</li>\n<li>css单独拆包</li>\n<li>css/js丑化压缩</li>\n<li>作用域提升</li>\n<li>tree shaking</li>\n<li>代码拆分</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构建具体实现\"><a href=\"#构建具体实现\" class=\"headerlink\" title=\"构建具体实现\"></a>构建具体实现</h2><h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p>预定使用以下目录结构<br>一个vue2+webpack5项目的目录结构（<a href=\"https://github.com/leeycode/vue2-webpack5-template/\">vue2-webpack5-template</a>）：</p>\n<pre><code>├── /config/                     # webpack配置文件\n│ ├── /paths.js/                 # 编译路径\n│ ├── /webpack.common.js/        # 基础通用配置\n│ ├── /webpack.config.js/        # 主构建配置\n│ ├── /webpack.dev.js/           # 开发环境配置\n│ ├── /webpack.prod.js/          # 生产环境配置\n├── /src/                        # 源码目录\n│ ├── /assets/                   # 静态资源目录\n│ ├── /components/               # 公共组件目录\n│ ├── /constants/                # 项目constants目录\n│ │ ├── _const.less              # less常量\n│ ├── /pages/                    # UI组件目录\n│ ├── /services/                 # 请求服务目录\n│ ├── /router/                   # 路由目录\n│ ├── /store/                    # 存放store文件目录\n│ ├── /style/                    # 全局样式\n│ ├── /utils/                    # utils目录\n│ │ ├── request.js               # 基于fetch封装的API请求工具\n│ │ ├── global.js                # 公共方法库\n│ └── main.js                    # 项目入口\n│ └── App.vue                    # 项目主页面\n|——eslintrc.js                   # 代码风格配置文件\n|——babel.config.js               # 工具babel转换配置，设置预设等\n|——postcss.config.js             # css样式转换配置\n|——package.json                  # 依赖包等信息配置文件</code></pre>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8baef760feaa4f829381340d9b06fc74~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"基础通用功能\"><a href=\"#基础通用功能\" class=\"headerlink\" title=\"基础通用功能\"></a>基础通用功能</h3><p>项目打包需要依赖webpack且需要在命令行执行，因此先行安装webpck、webpack-cli到开发依赖</p>\n<pre><code class=\"js\">npm i webpack webpack-cli --save-dev</code></pre>\n<p>安装完毕后在webpack.common.js中增加通用配置</p>\n<h4 id=\"entry-入口配置\"><a href=\"#entry-入口配置\" class=\"headerlink\" title=\"entry 入口配置\"></a>entry 入口配置</h4><pre><code class=\"js\">module.exports = &#123;\n    entry: &#39;./src/main.js&#39; // 默认是此目录，如若文件名称或者入口变更可修改\n&#125;</code></pre>\n<h4 id=\"output-输出配置\"><a href=\"#output-输出配置\" class=\"headerlink\" title=\"output 输出配置\"></a>output 输出配置</h4><pre><code class=\"js\">const resolveApp = require(&#39;./paths&#39;)\n\nmodule.exports = &#123;\n    output: &#123;\n        path: resolveApp(&#39;dist&#39;),\n        filename: &#39;js/[name].[hash:6].js&#39;,\n        chunkFilename: &#39;js/[name].chunk.[hash:4].js&#39;\n    &#125;\n&#125;</code></pre>\n<p>paths.js文件内容</p>\n<pre><code class=\"js\">const path = require(&#39;path&#39;) // webpack内置模块\n\nconst appRoot = process.cwd() // 命令行运行的根目录\n\nconst resolveApp = (resolvePath) =&gt; &#123;\n  return path.resolve(appRoot, resolvePath) // 获取指定目录的完整绝对路径\n&#125;\n\nmodule.exports = resolveApp</code></pre>\n<p>path：文件输出到dist目录中，根目录路径的获取通过命令行终端函数获取</p>\n<p>filename：构建后的脚本文件输出到js目录下，且使用动态文件名称，附带文件6为hash值</p>\n<p>chunkFilename：构建时拆分出来的chunk文件同样放入js目录下，且名称除了以上规则外，增加chunk标识</p>\n<h4 id=\"resolve-路径简化配置\"><a href=\"#resolve-路径简化配置\" class=\"headerlink\" title=\"resolve 路径简化配置\"></a>resolve 路径简化配置</h4><p>在模块源码中，通过import加载其他模块时需要写出其前缀目录地址，如若嵌套较深则会书写麻烦，此时可以配置特定路径标识映射，以简化此路径。</p>\n<p>同时，导入其他模块时默认在文件末尾增加js文件格式结尾，其他文件格式会无法找到，配置自动补全规则来增加其他文件格式补全</p>\n<pre><code class=\"js\">module.exports = &#123;\n    resolve: &#123;\n      extensions: [&#39;.js&#39;, &#39;.jsx&#39;, &#39;.vue&#39;, &#39;.json&#39;, &#39;...&#39;],\n      alias: &#123;\n        &#39;@&#39;: resolveApp(&#39;src&#39;)\n      &#125;\n    &#125;\n&#125;</code></pre>\n<p>resolve：通过<code>extensions</code>配置自动补全的文件类型</p>\n<p>resolve：通过<code>alias</code>配置简化路径的映射标识</p>\n<h4 id=\"externals-外部拓展\"><a href=\"#externals-外部拓展\" class=\"headerlink\" title=\"externals 外部拓展\"></a>externals 外部拓展</h4><p>外部依赖的库文件如若较大且不会频繁变动，则可将库文件的导入交给外部，如使用外链形式走cdn加速、构建dll库或其他形式，通过html页面增加script脚本引入库文件</p>\n<pre><code class=\"js\">module.exports = &#123;\n    externals: &#123; // 不希望依赖打进包中，走外链cdn等\n        // &#39;$&#39;: &#39;Jquery&#39;,\n        // vue: &#39;Vue&#39;,\n        // &#39;vuex&#39;: &#39;Vuex&#39;,\n        // moment: &#39;moment&#39;,\n        // antd: &#39;antd&#39;,\n    &#125;\n&#125;</code></pre>\n<h4 id=\"module-loader配置\"><a href=\"#module-loader配置\" class=\"headerlink\" title=\"module loader配置\"></a>module loader配置</h4><h5 id=\"为什么要用loader\"><a href=\"#为什么要用loader\" class=\"headerlink\" title=\"为什么要用loader\"></a>为什么要用loader</h5><p>1.webpack默认只能处理js文件，而我们项目中不可避免要用到样式表css、图片imgage、字体font等资源，而这类的资源文件webpack并不认识，因此无法直接处理</p>\n<p>2.js模块中我们会用到最新的ES6+语法，也可能会用到coffee script语法，或者严谨的typescript语法等，这些语法在浏览器环境中支持程度不一，或不支持直接解析。</p>\n<p>基于以上种种原因，我们需要通过loader加载器来将这类资源文件转换为可以被识别并解析的标准js</p>\n<h5 id=\"loaders\"><a href=\"#loaders\" class=\"headerlink\" title=\"loaders\"></a>loaders</h5><ul>\n<li>vue-loader</li>\n</ul>\n<p>安装</p>\n<p>先安装vue到项目依赖，再安装vue-loader、vue-template-compiler到开发依赖</p>\n<p>vue-template-compiler 的作用是将vue的模板代码预编译为渲染函数，以避免在运行时编译开销</p>\n<pre><code class=\"js\">npm i vue --save\nnpm i vue-loader vue-template-compiler --save-dev</code></pre>\n<p>使用</p>\n<pre><code class=\"js\">const VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;)\n\nmodule.exports = &#123;\n    module: &#123;\n      rules: [\n        &#123;\n          test: /\\.vue$/,\n          use: &#39;vue-loader&#39;\n        &#125;\n      ]\n    &#125;,\n    plugins: [\n        new VueLoaderPlugin()\n    ]\n&#125;</code></pre>\n<p>安装完毕后rules内添加相应规则，检测vue结尾的文件，并使用vue-loader。同时要求单独导出vueLoaderPlugin，在plugins插件集合内实例化，以此来正确解析vue文件</p>\n<ul>\n<li>css-loader</li>\n</ul>\n<p>对于样式表css的处理和其他vue、js处理不同，样式表css处理需要经过多步骤处理后才能正常使用，具体流程为：</p>\n<p>1.使用postcss-loader将css文件内样式根据浏览器支持情况转换为多平台兼容写法，如使用autoprefixer、browserslist、caniuse-lite等依赖增加平台特性写法；</p>\n<p>2.接着将转换后的样式表css交由css-loader处理import、url等行为，将引入和依赖的外部资源加载到当前样式表中；</p>\n<p>3.处理完毕后将css交由style-loader，已style标签的形式注入html页面中</p>\n<p>这里存在一个问题，开发环境时将css全部注入页面没有影响，但生产环境会是多文件大量内容，超出量后会导致首页加载变慢。因此需要在生产阶段将css单独抽离出文件，通过判断环境来加载相应配置,将module.exports导出内容变更为函数，接受环境标识</p>\n<p>安装loader</p>\n<pre><code class=\"js\">npm i postcss-loader css-loader style-loader --save-dev</code></pre>\n<p>安装插件plugin</p>\n<pre><code class=\"js\">npm i mini-css-extract-plugin --save-dev</code></pre>\n<p>使用</p>\n<pre><code class=\"js\">const MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;)\n\nmodule.exports = (isProduction) =&gt; &#123;\n    const cssFinalLoader = isProduction ? MiniCssExtractPlugin.loader : &#39;style-loader&#39;\n    return &#123;\n        module: &#123;\n          rules: [\n            &#123;\n              test: /\\.css$/,\n              use: [\n                cssFinalLoader, // 开发与生产使用不同loader\n                &#123;\n                  loader: &#39;css-loader&#39;,\n                  options: &#123;\n                    esModule: false, // css不使用esModule，直接输出\n                    importLoaders: 1 // 使用本loader前使用1个其他处理器\n                  &#125;\n                &#125;,\n                &#39;postcss-loader&#39;\n              ],\n              sideEffects: true // 希望保留副作用\n            &#125;\n          ]\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>  前边提到了postcss-loader会根据支持度情况自动转换css内容，postcss-loader作为转换的一个平台，会提供插槽的能力，但是转换的具体规则并不会去做，因此这个转换规则需要我们通过其他插件解决。这里我们使用一个预设的转换集合<code>postcss-preset-env</code></p>\n<p>安装</p>\n<pre><code class=\"js\">npm i postcss-preset-env --save-dev</code></pre>\n<p>使用</p>\n<p>postcss.config.js文件</p>\n<pre><code class=\"js\">module.exports = &#123;\n  plugins: [\n    require(&#39;postcss-preset-env&#39;)\n  ]\n&#125;</code></pre>\n<ul>\n<li>less-loader</li>\n</ul>\n<p>less-loader与css-loader处理逻辑相似，区别为：处理前需要先使用less-loader将less文件处理为css文件，处理less文件依赖less包。</p>\n<p>安装</p>\n<pre><code class=\"js\">npm i less less-loader --save-dev</code></pre>\n<p>配置</p>\n<pre><code class=\"js\">const MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;)\n\nmodule.exports = (isProduction) =&gt; &#123;\n    const cssFinalLoader = isProduction ? MiniCssExtractPlugin.loader : &#39;style-loader&#39;\n    return &#123;\n        module: &#123;\n          rules: [\n            &#123;\n              test: /\\.less$/,\n              use: [\n                cssFinalLoader,\n                &#123;\n                  loader: &#39;css-loader&#39;,\n                  options: &#123;\n                    importLoaders: 2\n                  &#125;\n                &#125;,\n                &#39;postcss-loader&#39;,\n                &#39;less-loader&#39;\n              ]\n            &#125;\n          ]\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>图片-loader</li>\n</ul>\n<p>在webpack4版本中，图片类资源是通过file-loader和url-loader来配合实现。但webpack5版本中官方内置了asset来处理静态资源类。</p>\n<p>配置</p>\n<pre><code class=\"js\">module.exports = (isProduction) =&gt; &#123;\n    return &#123;\n        module: &#123;\n          rules: [\n            &#123;\n              test: /\\.(png|gif|jpe?g|svg)$/,\n              type: &#39;asset&#39;, // webpack5使用内置静态资源模块，且不指定具体，根据以下规则使用\n              generator: &#123;\n                filename: &#39;img/[name].[hash:6][ext]&#39; // ext本身会附带点，放入img目录下\n              &#125;,\n              parser: &#123;\n                dataUrlCondition: &#123;\n                  maxSize: 10 * 1024 // 超过10kb的进行复制，不超过则直接使用base64\n                &#125;\n              &#125;\n            &#125;\n          ]\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>font 字体类loader</li>\n</ul>\n<p>配置</p>\n<p>与图片类资源处理相似，但去除了大小限制，因字体文件是整体，且无需额外处理，因此直接进行静态资源复制</p>\n<pre><code class=\"js\">module.exports = (isProduction) =&gt; &#123;\n    return &#123;\n        module: &#123;\n          rules: [\n            &#123;\n              test: /\\.(ttf|woff2?|eot)$/,\n              type: &#39;asset/resource&#39;, // 指定静态资源类复制\n              generator: &#123;\n                filename: &#39;font/[name].[hash:6][ext]&#39; // 放入font目录下\n              &#125;\n            &#125;\n          ]\n        &#125;\n    &#125;\n&#125;      </code></pre>\n<ul>\n<li>babel-loader</li>\n</ul>\n<p>js模块的转换操作需要依赖babel-loader，与postcss-loader类似，babel-loader也可以理解为一个转换的平台，并不做具体转换规则，因此需要依赖<code>@babel/core</code>、<code>@babel/preset-env</code>、<code>@vue/cli-plugin-babel</code>插件来完成转换</p>\n<p>安装</p>\n<pre><code class=\"js\">npm i @babel/core @babel/preset-env @vue/cli-plugin-babel --save-dev</code></pre>\n<p>配置</p>\n<pre><code class=\"js\">module.exports = (isProduction) =&gt; &#123;\n    return &#123;\n        module: &#123;\n          rules: [\n            &#123;\n              test: /\\.jsx?$/,\n              exclude: /node_modules/, // 过滤掉node_modules目录，只使用而已\n              use: &#39;babel-loader&#39; // js、jsx使用bable-loader处理\n            &#125;\n          ]\n        &#125;\n    &#125;\n&#125;</code></pre>\n<p>进行语法转换的时候需要排除掉node_modules目录</p>\n<p>babel.config.js文件</p>\n<pre><code class=\"js\">module.exports = &#123;\n  presets: [\n    &#39;@vue/cli-plugin-babel/preset&#39;,\n    [&#39;@babel/preset-env&#39;, &#123;\n      useBuiltIns: &#39;usage&#39;, // 用到什么填充什么，按需\n      corejs: 3 // 默认是2版本\n    &#125;]\n  ]\n&#125;</code></pre>\n<ul>\n<li>eslint-loader</li>\n</ul>\n<p>代码风格检查</p>\n<p>安装</p>\n<pre><code class=\"js\">npm i eslint eslint-loader --save-dev</code></pre>\n<p>配置</p>\n<pre><code class=\"js\">npx eslint --init // 根据提示完成配置，详情见webpack打包-上</code></pre>\n<p>执行完毕后会安装相关依赖和生成<code>.eslintrc.js</code>配置文件</p>\n<p>.eslintrc.js</p>\n<pre><code class=\"js\">module.exports = &#123;\n  env: &#123;\n    browser: true,\n    es2021: true\n  &#125;,\n  extends: [\n    &#39;plugin:vue/essential&#39;,\n    &#39;standard&#39;\n  ],\n  parserOptions: &#123;\n    ecmaVersion: 12,\n    sourceType: &#39;module&#39;\n  &#125;,\n  plugins: [\n    &#39;vue&#39;\n  ],\n  rules: &#123;\n  &#125;\n&#125;\n</code></pre>\n<h4 id=\"plugins-配置\"><a href=\"#plugins-配置\" class=\"headerlink\" title=\"plugins 配置\"></a>plugins 配置</h4><p>基础功能内提供全局变量定义、页面模板、vue相关plugin等配置</p>\n<pre><code class=\"js\">module.exports = (isProduction) =&gt; &#123;\n    return &#123;\n        plugins: [\n          new DefinePlugin(&#123;\n            BASE_URL: &#39;&quot;./&quot;&#39;\n          &#125;),\n          new HtmlWebpackPlugin(&#123;\n            title: &#39;vue2-webpack5-anted&#39;,\n            template: &#39;public/index.html&#39;\n          &#125;),\n          new VueLoaderPlugin()\n        ]\n    &#125;\n&#125;</code></pre>\n<h4 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h4><pre><code class=\"js\">const &#123; DefinePlugin &#125; = require(&#39;webpack&#39;)\nconst HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)\nconst TerserWebpackPlugin = require(&#39;terser-webpack-plugin&#39;)\nconst MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;)\nconst VueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;)\nconst resolveApp = require(&#39;./paths&#39;)\n\nmodule.exports = (isProduction) =&gt; &#123;\n  const cssFinalLoader = isProduction ? MiniCssExtractPlugin.loader : &#39;style-loader&#39;\n\n  return &#123;\n    entry: &#39;./src/main.js&#39;,\n    output: &#123;\n      path: resolveApp(&#39;dist&#39;),\n      filename: &#39;js/[name].[hash:6].js&#39;,\n      chunkFilename: &#39;js/[name].chunk.[hash:4].js&#39;\n    &#125;,\n    resolve: &#123;\n      extensions: [&#39;.js&#39;, &#39;.jsx&#39;, &#39;.vue&#39;, &#39;.json&#39;, &#39;...&#39;],\n      alias: &#123;\n        &#39;@&#39;: resolveApp(&#39;src&#39;)\n      &#125;\n    &#125;,\n    externals: &#123; // 不希望依赖打进包中，走外链cdn等\n      // &#39;$&#39;: &#39;Jquery&#39;,\n      // react: &#39;React&#39;,\n      // &#39;react-dom&#39;: &#39;ReactDOM&#39;,\n      // &#39;prop-types&#39;: &#39;PropTypes&#39;,\n      // moment: &#39;moment&#39;,\n      // antd: &#39;antd&#39;,\n      // classnames: &#39;classNames&#39;,\n    &#125;,\n    module: &#123;\n      rules: [\n        // vue文件处理\n        &#123;\n          test: /\\.vue$/,\n          use: &#39;vue-loader&#39;\n        &#125;,\n        // less文件处理\n        &#123;\n          test: /\\.less$/,\n          use: [\n            cssFinalLoader,\n            &#123;\n              loader: &#39;css-loader&#39;,\n              options: &#123;\n                importLoaders: 2\n              &#125;\n            &#125;,\n            &#39;postcss-loader&#39;,\n            &#39;less-loader&#39;\n          ]\n        &#125;,\n        // css文件处理\n        &#123;\n          test: /\\.css$/,\n          use: [\n            cssFinalLoader, // 最终要以style标签输出到页面\n            &#123;\n              loader: &#39;css-loader&#39;,\n              options: &#123;\n                esModule: false, // css不使用esModule，直接输出\n                importLoaders: 1 // 使用本loader前使用1个其他处理器\n              &#125;\n            &#125;,\n            &#39;postcss-loader&#39;\n          ],\n          sideEffects: true // 希望保留副作用\n        &#125;,\n        // 图片类处理\n        &#123;\n          test: /\\.(png|gif|jpe?g|svg)$/,\n          type: &#39;asset&#39;, // webpack5使用内置静态资源模块，且不指定具体，根据以下规则 使用\n          generator: &#123;\n            filename: &#39;img/[name].[hash:6][ext]&#39; // ext本身会附带 点，放入img目录下\n          &#125;,\n          parser: &#123;\n            dataUrlCondition: &#123;\n              maxSize: 10 * 1024 // 超过10kb的进行复制，不超过则直接使用base64\n            &#125;\n          &#125;\n        &#125;,\n        // 字体类处理\n        &#123;\n          test: /\\.(ttf|woff2?|eot)$/,\n          type: &#39;asset/resource&#39;, // 指定静态资源类复制\n          generator: &#123;\n            filename: &#39;font/[name].[hash:6][ext]&#39; // 放入font目录下\n          &#125;\n        &#125;,\n        // 脚本类处理\n        &#123;\n          test: /\\.jsx?$/,\n          exclude: /node_modules/, // 过滤掉node_modules目录，只使用而已\n          use: &#39;babel-loader&#39; // js、jsx使用bable-loader处理\n        &#125;,\n        &#123;\n          test: /\\.(vue|js)$/,\n          use: &#39;eslint-loader&#39;,\n          exclude: /node_modules/,\n          enforce: &#39;pre&#39;\n        &#125;\n      ]\n    &#125;,\n    plugins: [\n      new DefinePlugin(&#123;\n        BASE_URL: &#39;&quot;./&quot;&#39;\n      &#125;),\n      new HtmlWebpackPlugin(&#123;\n        title: &#39;贾贵山-自建构建打包流程&#39;,\n        template: &#39;public/index.html&#39;\n      &#125;),\n      new VueLoaderPlugin()\n    ],\n    optimization: &#123;\n      runtimeChunk: true, // 模块抽取，利用浏览器缓存\n      minimizer: [\n        new TerserWebpackPlugin(&#123;\n          extractComments: false // 不要注释生成的文件\n        &#125;)\n      ]\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"开发阶段配置\"><a href=\"#开发阶段配置\" class=\"headerlink\" title=\"开发阶段配置\"></a>开发阶段配置</h3><p>因开发环境在通用配置基础上配置，因此直接展示完整示例，对相应配置进行说明</p>\n<p>安装</p>\n<pre><code class=\"js\">npm i webpack-merge webpack-dev-server --save-dev</code></pre>\n<p>配置</p>\n<pre><code class=\"js\">const baseConfig = require(&#39;./webpack.common&#39;)\nconst &#123; merge &#125; = require(&#39;webpack-merge&#39;)\n\nmodule.exports = merge(baseConfig(false), &#123;\n  mode: &#39;development&#39;,\n  devtool: &#39;cheap-module-source-map&#39;,\n  target: &#39;web&#39;,\n  devServer: &#123;\n    hot: &#39;only&#39;,\n    port: 3002, // 端口号，工作中从3001开始，因此增加1个到3002\n    open: true, // 自动打开浏览器\n    compress: true, // 开启gzip压缩\n    historyApiFallback: true, // history路径在刷新出错时重定向开启\n    proxy: &#123; // 接口代理\n      &#39;/api&#39;: &#123; // 统一api前缀都代理掉\n        target: &#39;http://api.github.com&#39;, // 代理的目标地址\n        changeOrigin: true, // 改变来源信息\n        pathRewrite: &#123; // 因前缀为自己增加，因此重写地址\n          &#39;/api&#39;: &#39;&#39; // 将前缀去掉\n        &#125;\n      &#125;\n    &#125;\n  &#125;,\n  optimization: &#123;\n    chunkIds: &#39;named&#39;\n  &#125;\n&#125;)</code></pre>\n<ul>\n<li>使用 <code>webpack-merge</code> 包进行配置合并</li>\n<li>mode: 指定当前模式为开发模式 <code>development</code></li>\n<li>devtool: 指定生成source map，且规则模式为 <code>cheap-module-source-map</code></li>\n<li>target: 指定目标为web平台</li>\n<li>devServer: 本地服务环境配置对象<ul>\n<li>hot: 开启热更新</li>\n<li>port: 本地服务的端口号为3002，可任意更改</li>\n<li>open: 服务启动后自动打开浏览器，默认为true</li>\n<li>compress: 压缩模式</li>\n<li>historyApiFallback: history模式访问时如路由不存在则重定向到首页</li>\n<li>proxy: 请求代理<ul>\n<li>‘/api’: 代理的请求点缀</li>\n<li>target: 将要代理到的目标地址</li>\n<li>changeOrigin: 是否更改来源信息</li>\n<li>pathRewrite: 重写配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"生产阶段配置\"><a href=\"#生产阶段配置\" class=\"headerlink\" title=\"生产阶段配置\"></a>生产阶段配置</h3><pre><code class=\"js\">const baseConfig = require(&#39;./webpack.common&#39;)\nconst &#123; merge &#125; = require(&#39;webpack-merge&#39;)\nconst CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;)\nconst &#123; CleanWebpackPlugin &#125; = require(&#39;clean-webpack-plugin&#39;)\nconst MiniCssExtractPlugin = require(&#39;mini-css-extract-plugin&#39;)\nconst CssMinimizerPlugin = require(&#39;css-minimizer-webpack-plugin&#39;)\nconst webpack = require(&#39;webpack&#39;)\nconst PurgeCSSPlugin = require(&#39;purgecss-webpack-plugin&#39;)\nconst resolveApp = require(&#39;./paths&#39;)\nconst glob = require(&#39;glob&#39;)\nconst CompressionPlugin = require(&#39;compression-webpack-plugin&#39;)\n// var InlineChunkHtmlPlugin = require(&#39;inline-chunk-html-plugin&#39;);\n// const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n\nmodule.exports = merge(baseConfig(true), &#123;\n  mode: &#39;production&#39;,\n  plugins: [\n    new CleanWebpackPlugin(),\n    new CopyWebpackPlugin(&#123;\n      patterns: [&#123;\n        from: &#39;public&#39;,\n        to: &#39;public&#39;,\n        globOptions: &#123;\n          ignore: [&#39;**/index.html&#39;]\n        &#125;\n      &#125;]\n    &#125;),\n    new MiniCssExtractPlugin(&#123; // css单独拆分为文件\n      filename: &#39;css/[name].[hash:6].css&#39;\n    &#125;),\n    new webpack.optimize.ModuleConcatenationPlugin(), // 作用域提升，提升性能\n    new PurgeCSSPlugin(&#123;\n      paths: glob.sync(`$&#123;resolveApp(&#39;./src&#39;)&#125;/**/*`, &#123; nodir: true &#125;)\n    &#125;),\n    new CompressionPlugin(&#123;\n      test: /\\.(css|js)$/i,\n      algorithm: &#39;gzip&#39;\n    &#125;)\n    // new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime/]) // 将一定大小文件直接注入 html,\n  ],\n  optimization: &#123;\n    chunkIds: &#39;deterministic&#39;, // 文件名称尽可能短，也会是序号类型\n    splitChunks: &#123;\n      chunks: &#39;all&#39;,\n      minSize: 20000, // 拆分的每个包不小于20kb\n      maxSize: 20000, // 体积大于设置的值的包要去拆分开包\n      minChunks: 1, // 包如果要拆分，则必须要至少引用一次\n      cacheGroups: &#123;\n        syVendors: &#123;\n          test: /[\\\\/]node_modules[\\\\/]/, // 对目录内文件进行单独打包拆分，且放入一个文件中 vender\n          filename: &#39;js/[id]_verdor.js&#39;, // 最终名字\n          priority: -10 // 都满足时候的优先级，越高月用\n        &#125;\n      &#125;\n    &#125;,\n    minimizer: [\n      new CssMinimizerPlugin()\n    ]\n  &#125;\n&#125;)</code></pre>\n<p>生产环境依然采用合并基础配置方式</p>\n<ul>\n<li>mode: 此时采用 <code>production</code>模式</li>\n<li>plugins: 生产阶段使用的plugins列表<ul>\n<li>CleanWebpackPlugin 清除dist目录插件</li>\n<li>CopyWebpackPlugin 静态资源目录复制插件</li>\n<li>MiniCssExtractPlugin 单独拆分出css包</li>\n<li>ModuleConcatenationPlugin 将js的作用域提升，减少作用域层级来提升性能</li>\n<li>PurgeCSSPlugin 摇掉未使用的css</li>\n<li>CompressionPlugin 采用gzip形式押错css和js</li>\n<li>optimization 生产环境优化配置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"构建入口配置\"><a href=\"#构建入口配置\" class=\"headerlink\" title=\"构建入口配置\"></a>构建入口配置</h3><pre><code class=\"js\">\nconst devConfig = require(&#39;./webpack.dev&#39;)\nconst prodConfig = require(&#39;./webpack.prod&#39;)\n// const SpeedMeasurePlugin = require(&quot;speed-measure-webpack-plugin&quot;);\n\n// const smp = new SpeedMeasurePlugin();\n\nmodule.exports = (env) =&gt; &#123;\n  // const finalResult = env.production ? prodConfig : devConfig;\n  // console.log(&#39;final----&gt;&#39;, finalResult)\n  // return smp.wrap(finalResult);\n  return env.production ? prodConfig : devConfig\n&#125;\n</code></pre>\n<p>构建时减少繁琐修改配置文件的操作，在package.json内添加启动参数来选择不同环境配置</p>\n<h3 id=\"打包速度优化\"><a href=\"#打包速度优化\" class=\"headerlink\" title=\"打包速度优化\"></a>打包速度优化</h3><p>优化效率工具<br>安装以下 webpack 插件，帮助我们分析优化效率：</p>\n<ol>\n<li>progress-bar-webpack-plugin：查看编译进度；</li>\n<li>speed-measure-webpack-plugin：查看编译速度；</li>\n<li>webpack-bundle-analyzer：打包体积分析。</li>\n</ol>\n<h4 id=\"编译进度条\"><a href=\"#编译进度条\" class=\"headerlink\" title=\"编译进度条\"></a>编译进度条</h4><p>一般来说，中型项目的首次编译时间为 5-20s，没个进度条等得多着急，通过 progress-bar-webpack-plugin 插件查看编译进度，方便我们掌握编译情况。</p>\n<pre><code class=\"js\">npm i -D progress-bar-webpack-plugin</code></pre>\n<p>webpack.common.js 配置方式如下：</p>\n<pre><code class=\"js\">const chalk = require(&#39;chalk&#39;)\nconst ProgressBarPlugin = require(&#39;progress-bar-webpack-plugin&#39;)\nmodule.exports = &#123;\n  plugins: [\n    // 进度条 贴心的为进度百分比添加了加粗和绿色高亮态样式。\n    new ProgressBarPlugin(&#123;\n        format: `  :msg [:bar] $&#123;chalk.green.bold(&#39;:percent&#39;)&#125; (:elapsed s)`\n      &#125;)\n  ],\n&#125;</code></pre>\n<h4 id=\"编译速度分析\"><a href=\"#编译速度分析\" class=\"headerlink\" title=\"编译速度分析\"></a>编译速度分析</h4><p>优化 webpack 构建速度，首先需要知道是哪些插件、哪些 loader 耗时长，方便我们针对性的优化。</p>\n<pre><code class=\"js\">npm i speed-measure-webpack-plugin -D</code></pre>\n<p>webpack.pro.js 配置方式如下：</p>\n<pre><code class=\"js\">\nconst SpeedMeasurePlugin = require(&quot;speed-measure-webpack-plugin&quot;);\nconst smp = new SpeedMeasurePlugin();\nmodule.exports = smp.wrap(&#123;\n  // ...webpack config...\n&#125;)</code></pre>\n<h4 id=\"打包体积分析\"><a href=\"#打包体积分析\" class=\"headerlink\" title=\"打包体积分析\"></a>打包体积分析</h4><p>使用 webpack-bundle-analyzer 查看打包后生成的 bundle 体积分析，将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。帮助我们分析输出结果来检查模块在何处结束。</p>\n<pre><code class=\"js\">npm i -D webpack-bundle-analyzer</code></pre>\n<p>webpack.prod.js 配置方式如下：</p>\n<pre><code class=\"js\">\nconst BundleAnalyzerPlugin = require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin;\nmodule.exports = &#123;\n  plugins: [\n    // 打包体积分析\n    new BundleAnalyzerPlugin()\n  ],\n&#125;</code></pre>\n<h3 id=\"第三方包优化\"><a href=\"#第三方包优化\" class=\"headerlink\" title=\"第三方包优化\"></a>第三方包优化</h3><h4 id=\"ant-design-vue\"><a href=\"#ant-design-vue\" class=\"headerlink\" title=\"ant-design-vue\"></a>ant-design-vue</h4><pre><code class=\"js\">npm i --save ant-design-vue@1.7.2\nnpm i babel-plugin-import -D</code></pre>\n<p>官方有对其配置按需加载功能，但是在实际使用用过程中，很多没有使用的组件还是被打包进了项目，主要集中在@ant-design/icons、moment上，占用了很大的体积。</p>\n<p>babel.config.js中：</p>\n<pre><code class=\"js\">plugins: [\n    &lt;!--ant-design-vue按需加载配置--&gt;\n    [\n      &#39;import&#39;,\n      &#123; libraryName: &#39;ant-design-vue&#39;, libraryDirectory: &#39;es&#39;, style: &#39;css&#39; &#125;,\n      &#39;ant-design-vue&#39;\n    ],\n    &lt;!--lodash按需加载配置--&gt;\n    &#39;lodash&#39;\n  ]</code></pre>\n<h4 id=\"moment\"><a href=\"#moment\" class=\"headerlink\" title=\"moment\"></a>moment</h4><p>moment的locale占了很大一部分，这也是我目前不需要用到的，所以我可以借用moment-locales-webpack-plugin插件移除moment中未用到的代码，先来安装它：</p>\n<pre><code class=\"js\">npm i moment-locales-webpack-plugin -D</code></pre>\n<pre><code class=\"js\">// webpack.common.js\nconst MomentLocalesPlugin = require(&#39;moment-locales-webpack-plugin&#39;);\n\nmodule.exports = &#123;\n  // ...\n  plugin: [new MomentLocalesPlugin()]\n&#125;</code></pre>\n<h3 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h3><pre><code class=\"js\">npm install\nnpm run serve\nnpm run build</code></pre>\n<p>本地开发则启动 <code>npm run serve</code><br>构建生产环境则 <code>npm run build</code><br>检查代码风格则 <code>npm run lint</code></p>\n","categories":[{"name":"webpack专区","path":"api/categories/webpack专区.json"}],"tags":[{"name":"vue","path":"api/tags/vue.json"},{"name":"webpack","path":"api/tags/webpack.json"}]}