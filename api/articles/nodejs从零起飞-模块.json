{"title":"nodejs从零起飞-模块","slug":"nodejs从零起飞-模块","date":"2021-01-20T09:17:27.000Z","updated":"2022-01-05T09:29:43.173Z","comments":true,"path":"api/articles/nodejs从零起飞-模块.json","excerpt":null,"covers":null,"content":"<h2 id=\"nodejs和javascript的区别\"><a href=\"#nodejs和javascript的区别\" class=\"headerlink\" title=\"nodejs和javascript的区别\"></a>nodejs和javascript的区别</h2><p>W3C 是规定 web 标准的，如 html css js-web-api 等，和 nodejs 没关系。</p>\n<p>ECMA 是规范 js 语法的，例如变量，函数，class，if 语句等这些语法的，和具体 API 没关系。</p>\n<p>前端 js = ECMA + js-web-api</p>\n<p>nodejs = ECMA + node-api</p>\n<h2 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h2><p>commonjs是nodejs默认有的模块化规范,每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p>\n<p>module,exports,require是关键词，下列示例中演示b.js引用a.js的方式，第三方库的引用方式。</p>\n<h3 id=\"module对象\"><a href=\"#module对象\" class=\"headerlink\" title=\"module对象\"></a>module对象</h3><p>Node内部提供一个Module构建函数。所有模块都是Module的实例。每个模块内部，都有一个module对象，代表当前模块。</p>\n<p>module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。</p>\n<h3 id=\"require命令\"><a href=\"#require命令\" class=\"headerlink\" title=\"require命令\"></a>require命令</h3><p>Node使用CommonJS模块规范，内置的require命令用于加载模块文件。</p>\n<p>require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><p>a.js文件中</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 单个导出</span>\n<span class=\"token comment\" spellcheck=\"true\">// module.exports.add = add</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 全部导出</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    add<span class=\"token punctuation\">,</span>\n    mul\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>b文件中</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// node 模块导出的都是对象，所以导入 node 模块就是对一个对象进行取值。</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> mul <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr...'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"CommonJS模块的特点\"><a href=\"#CommonJS模块的特点\" class=\"headerlink\" title=\"CommonJS模块的特点\"></a>CommonJS模块的特点</h2><ul>\n<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>\n<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>\n<li>模块加载的顺序，按照其在代码中出现的顺序。</li>\n</ul>\n<h2 id=\"ES-modules\"><a href=\"#ES-modules\" class=\"headerlink\" title=\"ES modules\"></a>ES modules</h2><p>Node.js从v13.2.0，宣布开始支持ES modules。在此之前，想要在node中使用ES modules，需要添加–experimental-module。<br>v13.2.0版本后，可以直接使用ES modules了。<strong>该特性依然是实验性的（Stability: 1），不建议在生产环境中使用该功能。</strong></p>\n<h3 id=\"在node中使用ES-modules\"><a href=\"#在node中使用ES-modules\" class=\"headerlink\" title=\"在node中使用ES modules\"></a>在node中使用ES modules</h3><p>想要在项目中使用ES modules，有以下两种方法：</p>\n<ol>\n<li>文件后缀名使用.mjs</li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">|</span>____component\n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span>____a<span class=\"token punctuation\">.</span>mjs\n<span class=\"token operator\">|</span>____index<span class=\"token punctuation\">.</span>mjs\n</code></pre>\n<p>文件内容如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// a.mjs</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// index.mjs</span>\n<span class=\"token keyword\">import</span> a <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.mjs'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol start=\"2\">\n<li>文件依然使用.js的后缀名，在项目的package.json中设置：type:module</li>\n</ol>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token operator\">|</span>____component\n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span>____a<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">|</span>____package<span class=\"token punctuation\">.</span>json\n<span class=\"token operator\">|</span>____index<span class=\"token punctuation\">.</span>js\n</code></pre>\n<p>各个文件内容如下：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// component/a.js</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'This is component a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// index.js</span>\n<span class=\"token keyword\">import</span> a <span class=\"token keyword\">from</span> <span class=\"token string\">'./component/a.mjs'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 必须要有这一行</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","more":"<h2 id=\"nodejs和javascript的区别\"><a href=\"#nodejs和javascript的区别\" class=\"headerlink\" title=\"nodejs和javascript的区别\"></a>nodejs和javascript的区别</h2><p>W3C 是规定 web 标准的，如 html css js-web-api 等，和 nodejs 没关系。</p>\n<p>ECMA 是规范 js 语法的，例如变量，函数，class，if 语句等这些语法的，和具体 API 没关系。</p>\n<p>前端 js = ECMA + js-web-api</p>\n<p>nodejs = ECMA + node-api</p>\n<h2 id=\"commonjs\"><a href=\"#commonjs\" class=\"headerlink\" title=\"commonjs\"></a>commonjs</h2><p>commonjs是nodejs默认有的模块化规范,每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p>\n<p>module,exports,require是关键词，下列示例中演示b.js引用a.js的方式，第三方库的引用方式。</p>\n<h3 id=\"module对象\"><a href=\"#module对象\" class=\"headerlink\" title=\"module对象\"></a>module对象</h3><p>Node内部提供一个Module构建函数。所有模块都是Module的实例。每个模块内部，都有一个module对象，代表当前模块。</p>\n<p>module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。</p>\n<h3 id=\"require命令\"><a href=\"#require命令\" class=\"headerlink\" title=\"require命令\"></a>require命令</h3><p>Node使用CommonJS模块规范，内置的require命令用于加载模块文件。</p>\n<p>require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错。</p>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><p>a.js文件中</p>\n<pre><code class=\"js\">function add(a, b) &#123;\n    return a + b\n&#125;\n\nfunction mul(a, b) &#123;\n    return a * b\n&#125;\n\n// 单个导出\n// module.exports.add = add\n\n// 全部导出\nmodule.exports = &#123;\n    add,\n    mul\n&#125;\n</code></pre>\n<p>b文件中</p>\n<pre><code class=\"js\">// node 模块导出的都是对象，所以导入 node 模块就是对一个对象进行取值。\nconst &#123; add, mul &#125; = require(&#39;./a&#39;)\nconst _ = require(&#39;lodash&#39;)\n\nconst sum = add(10, 20)\nconst result = mul(100, 200)\n\nconsole.log(sum)\nconsole.log(result)\n\nconst arr = _.concat([1, 2], 3)\nconsole.log(&#39;arr...&#39;, arr)\n</code></pre>\n<h2 id=\"CommonJS模块的特点\"><a href=\"#CommonJS模块的特点\" class=\"headerlink\" title=\"CommonJS模块的特点\"></a>CommonJS模块的特点</h2><ul>\n<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>\n<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>\n<li>模块加载的顺序，按照其在代码中出现的顺序。</li>\n</ul>\n<h2 id=\"ES-modules\"><a href=\"#ES-modules\" class=\"headerlink\" title=\"ES modules\"></a>ES modules</h2><p>Node.js从v13.2.0，宣布开始支持ES modules。在此之前，想要在node中使用ES modules，需要添加–experimental-module。<br>v13.2.0版本后，可以直接使用ES modules了。<strong>该特性依然是实验性的（Stability: 1），不建议在生产环境中使用该功能。</strong></p>\n<h3 id=\"在node中使用ES-modules\"><a href=\"#在node中使用ES-modules\" class=\"headerlink\" title=\"在node中使用ES modules\"></a>在node中使用ES modules</h3><p>想要在项目中使用ES modules，有以下两种方法：</p>\n<ol>\n<li>文件后缀名使用.mjs</li>\n</ol>\n<pre><code class=\"js\">|____component\n| |____a.mjs\n|____index.mjs\n</code></pre>\n<p>文件内容如下：</p>\n<pre><code class=\"js\">// a.mjs\nlet a = &#39;Hello World&#39;;\nexport default a;\n\n// index.mjs\nimport a from &#39;./a.mjs&#39;;\nconsole.log(a);\n</code></pre>\n<ol start=\"2\">\n<li>文件依然使用.js的后缀名，在项目的package.json中设置：type:module</li>\n</ol>\n<pre><code class=\"js\">\n|____component\n| |____a.js\n|____package.json\n|____index.js\n</code></pre>\n<p>各个文件内容如下：</p>\n<pre><code class=\"js\">// component/a.js\nlet a = &#39;This is component a&#39;;\nexport default a;\n\n// index.js\nimport a from &#39;./component/a.mjs&#39;;\nconsole.log(a);\n\n// package.json\n&#123;\n  ...\n  &quot;type&quot;: &quot;module&quot;, // 必须要有这一行\n  ...\n&#125;</code></pre>\n","categories":[{"name":"nodeJs专栏","path":"api/categories/nodeJs专栏.json"}],"tags":[{"name":"nodejs","path":"api/tags/nodejs.json"}]}