{"title":"outlook邮箱样式问题","slug":"outlook邮箱样式问题","date":"2021-02-22T07:13:48.000Z","updated":"2021-02-22T08:32:43.009Z","comments":true,"path":"api/articles/outlook邮箱样式问题.json","excerpt":null,"covers":null,"content":"<p>最近项目中发送html格式的邮件到邮箱客户端，发现邮件样式千奇百怪，不堪入目。在google里面baidu了下,才发现问题严重了。因为安全原因，各大邮箱服务商及邮件客户端都会对邮件内容进行一定程度上的处理，不会按照你写的原本 HTML 展示，尤其是前端搅屎棍微软开发的OutLook，一向特立独行，使得outlook邮箱的样式成为最难写的样式。特意总结下，留给有缘人参考。</p>\n<h2 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h2><p>目前，兼容性最好的Doctype是XHTML 1.0 Strict，事实上Gmail和Hotmail会删掉你的Doctype，换上这个Doctype。使用这个Doctype，也就意味着，不能使用HTML5的语法。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE html PUBLIC <span class=\"token string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>html xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/1999/xhtml\"</span><span class=\"token operator\">></span>\n\n　<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n\n　　<span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string\">\"Content-Type\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"text/html; charset=UTF-8\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n　　<span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>HTML Email编写指南<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n\n　　<span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n　<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n</code></pre>\n<p>我们知道完整的 HTML 包括 DOCTYPE 声明、html 和 head 标签及其内容、body 标签，对于在一个 iframe 中显示邮件内容的邮箱还好，会保留上述结构，但是有些邮件（如 Gmail）都是在 div 中直接包含，这就对安全要求极为苛刻。安全原因邮箱会默认把上述结构做删除处理，所以写了几乎没有作用，在可能的情况下尽量把内容写到 body 内，甚至建议从 table 开写，直接放弃 DOCTYPE / html / head / body 标签。</p>\n<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局必须使用table，因为各个邮箱对 div + css 这一套布局的解析问题很大（如 float / position 等 CSS 都会被过滤，甚至 margin: 0 auto; 都不起作用），基本各大邮箱都会解析混乱，这就意味着 HTML 邮件中几乎只有这几个元素——table / tr / td / span / img / a，尽量避免使用 div / p 或是其他标签。</p>\n<p>而且并不是所有邮箱都支持 colspan / rowspan 属性，所以所有布局都需要使用 table 嵌套解决。</p>\n<p>使用表格布局导致的最直接的问题就是会产生多余的空白像素，所以要养成习惯给每个 table 都加上边框 border，单元格内边距 cellpadding，单元格间距 cellspacing，边框合并属性 border-collapse 这些属性：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>table border<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span> cellpadding<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span> cellspacing<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"border-collapse: collapse;\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token operator\">...</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>table<span class=\"token operator\">></span></code></pre>\n<h2 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h2><p>有些版本的邮箱解析的时候会将head里面的内容直接删了，导致样式失效。html邮件也不支持外联的css,这就意味着只有內联CSS是唯一可靠的编写样式途径。</p>\n<h2 id=\"属性优先\"><a href=\"#属性优先\" class=\"headerlink\" title=\"属性优先\"></a>属性优先</h2><p>并不是使用 style 属性就保险了，很多邮箱会对特定标签的属性做强制改造。</p>\n<p>比如在 OutLook 中，图片使用以下方式来设置宽高是无效的：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>img style<span class=\"token operator\">=</span><span class=\"token string\">\"width: 10px; height: 10px;\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"*.png\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>正确的设置方法：</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token operator\">&lt;</span>img width<span class=\"token operator\">=</span><span class=\"token string\">\"10\"</span> height<span class=\"token operator\">=</span><span class=\"token string\">\"10\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"*.png\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>所以在有属性能够实现样式效果的时候尽量使用属性，常见的可用属性有：</p>\n<pre class=\" language-js\"><code class=\"language-js\">width\nheight\nbgcolor\nalign\nvalign\n……\n</code></pre>\n<h2 id=\"样式继承\"><a href=\"#样式继承\" class=\"headerlink\" title=\"样式继承\"></a>样式继承</h2><p>html邮件中某些属性的继承可能失效，比如 font-family，OutLook 中若想改变字体，至少每个 table 中都要指定 font-family，而在 QQ 邮箱甚至必须每个 td 都设置 font-family 才能全部生效。因此，每个标签单独写样式是很有必要的。</p>\n<h2 id=\"背景图片\"><a href=\"#背景图片\" class=\"headerlink\" title=\"背景图片\"></a>背景图片</h2><p>style 内容里面 background 可以设置 color，但是 image 会被过滤，就是说不能通过 CSS 来设置背景图片了。但是有一个很有意思的元素属性，也叫 background，里面可以定义一个图片路径，但是功能有限，比如无法定位背景图片等。</p>\n<p>例如要给一个单元格加一个背景，必须这样写：</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>td background<span class=\"token operator\">=</span><span class=\"token string\">\"*.png\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token operator\">...</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span></code></pre>\n<h2 id=\"字体相关\"><a href=\"#字体相关\" class=\"headerlink\" title=\"字体相关\"></a>字体相关</h2><p>在 HTML 邮件中，font-family 只支持系统字体，不支持自定义字体，也不支持 font 简写，color 尽可能也不要使用简写：</p>\n<pre class=\" language-js\"><code class=\"language-js\">font<span class=\"token punctuation\">:</span> 12px <span class=\"token operator\">/</span> 14px Arial<span class=\"token punctuation\">,</span> sans<span class=\"token operator\">-</span>serif<span class=\"token punctuation\">;</span> \ncolor<span class=\"token punctuation\">:</span> #<span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>需要写成：</p>\n<pre class=\" language-js\"><code class=\"language-js\">line<span class=\"token operator\">-</span>height<span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span> \nfont<span class=\"token operator\">-</span>size<span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span> \nfont<span class=\"token operator\">-</span>family<span class=\"token punctuation\">:</span> <span class=\"token string\">\"微软雅黑\"</span><span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans<span class=\"token operator\">-</span>serif<span class=\"token punctuation\">;</span> \ncolor<span class=\"token punctuation\">:</span> #<span class=\"token number\">999999</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>对于加粗字体，我们可以使用 b 标签而不是 CSS 的 font-weight，前文说过，HTML 标签和属性能解决的样式决不使用 CSS 样式。</p>\n<h2 id=\"行高\"><a href=\"#行高\" class=\"headerlink\" title=\"行高\"></a>行高</h2><p>在 OutLook 中会有个默认的行高最小值，特别是当设置 font-family 为微软雅黑时，默认的行高差不多为 Word 中的两倍行距，如果 line-height 设置的值小于默认的行高，无论你设置的是多少，则始终使用默认值，在很多情况下这是不能忍的，好在有个神奇的 mso-line-height-rule，使用行高时添加 mso-line-height-rule:exactly; 就能使行高始终等于我们所设置的值。</p>\n<pre class=\" language-js\"><code class=\"language-js\">\n<span class=\"token operator\">&lt;</span>td style<span class=\"token operator\">=</span><span class=\"token string\">\"mso-line-height-rule: exactly; line-height: 36px;\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token operator\">...</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span>\n</code></pre>\n<p>这只是微软的 CSS 属性，对其他客户端没影响。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://www.ruanyifeng.com/blog/2013/06/html_email.html\">HTML Email 编写指南</a></p>\n","more":"<p>最近项目中发送html格式的邮件到邮箱客户端，发现邮件样式千奇百怪，不堪入目。在google里面baidu了下,才发现问题严重了。因为安全原因，各大邮箱服务商及邮件客户端都会对邮件内容进行一定程度上的处理，不会按照你写的原本 HTML 展示，尤其是前端搅屎棍微软开发的OutLook，一向特立独行，使得outlook邮箱的样式成为最难写的样式。特意总结下，留给有缘人参考。</p>\n<h2 id=\"Doctype\"><a href=\"#Doctype\" class=\"headerlink\" title=\"Doctype\"></a>Doctype</h2><p>目前，兼容性最好的Doctype是XHTML 1.0 Strict，事实上Gmail和Hotmail会删掉你的Doctype，换上这个Doctype。使用这个Doctype，也就意味着，不能使用HTML5的语法。</p>\n<pre><code class=\"js\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n\n　&lt;head&gt;\n\n　　&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n\n　　&lt;title&gt;HTML Email编写指南&lt;/title&gt;\n\n　　&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;\n\n　&lt;/head&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>我们知道完整的 HTML 包括 DOCTYPE 声明、html 和 head 标签及其内容、body 标签，对于在一个 iframe 中显示邮件内容的邮箱还好，会保留上述结构，但是有些邮件（如 Gmail）都是在 div 中直接包含，这就对安全要求极为苛刻。安全原因邮箱会默认把上述结构做删除处理，所以写了几乎没有作用，在可能的情况下尽量把内容写到 body 内，甚至建议从 table 开写，直接放弃 DOCTYPE / html / head / body 标签。</p>\n<h2 id=\"页面布局\"><a href=\"#页面布局\" class=\"headerlink\" title=\"页面布局\"></a>页面布局</h2><p>页面布局必须使用table，因为各个邮箱对 div + css 这一套布局的解析问题很大（如 float / position 等 CSS 都会被过滤，甚至 margin: 0 auto; 都不起作用），基本各大邮箱都会解析混乱，这就意味着 HTML 邮件中几乎只有这几个元素——table / tr / td / span / img / a，尽量避免使用 div / p 或是其他标签。</p>\n<p>而且并不是所有邮箱都支持 colspan / rowspan 属性，所以所有布局都需要使用 table 嵌套解决。</p>\n<p>使用表格布局导致的最直接的问题就是会产生多余的空白像素，所以要养成习惯给每个 table 都加上边框 border，单元格内边距 cellpadding，单元格间距 cellspacing，边框合并属性 border-collapse 这些属性：</p>\n<pre><code class=\"js\">&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;\n    &lt;!-- ... --&gt;\n&lt;/table&gt;</code></pre>\n<h2 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h2><p>有些版本的邮箱解析的时候会将head里面的内容直接删了，导致样式失效。html邮件也不支持外联的css,这就意味着只有內联CSS是唯一可靠的编写样式途径。</p>\n<h2 id=\"属性优先\"><a href=\"#属性优先\" class=\"headerlink\" title=\"属性优先\"></a>属性优先</h2><p>并不是使用 style 属性就保险了，很多邮箱会对特定标签的属性做强制改造。</p>\n<p>比如在 OutLook 中，图片使用以下方式来设置宽高是无效的：</p>\n<pre><code class=\"js\">&lt;img style=&quot;width: 10px; height: 10px;&quot; src=&quot;*.png&quot; /&gt;</code></pre>\n<p>正确的设置方法：</p>\n<pre><code class=\"js\">\n&lt;img width=&quot;10&quot; height=&quot;10&quot; src=&quot;*.png&quot; /&gt;</code></pre>\n<p>所以在有属性能够实现样式效果的时候尽量使用属性，常见的可用属性有：</p>\n<pre><code class=\"js\">width\nheight\nbgcolor\nalign\nvalign\n……\n</code></pre>\n<h2 id=\"样式继承\"><a href=\"#样式继承\" class=\"headerlink\" title=\"样式继承\"></a>样式继承</h2><p>html邮件中某些属性的继承可能失效，比如 font-family，OutLook 中若想改变字体，至少每个 table 中都要指定 font-family，而在 QQ 邮箱甚至必须每个 td 都设置 font-family 才能全部生效。因此，每个标签单独写样式是很有必要的。</p>\n<h2 id=\"背景图片\"><a href=\"#背景图片\" class=\"headerlink\" title=\"背景图片\"></a>背景图片</h2><p>style 内容里面 background 可以设置 color，但是 image 会被过滤，就是说不能通过 CSS 来设置背景图片了。但是有一个很有意思的元素属性，也叫 background，里面可以定义一个图片路径，但是功能有限，比如无法定位背景图片等。</p>\n<p>例如要给一个单元格加一个背景，必须这样写：</p>\n<pre><code class=\"js\">&lt;td background=&quot;*.png&quot;&gt;\n    &lt;!-- ... --&gt;\n&lt;/td&gt;</code></pre>\n<h2 id=\"字体相关\"><a href=\"#字体相关\" class=\"headerlink\" title=\"字体相关\"></a>字体相关</h2><p>在 HTML 邮件中，font-family 只支持系统字体，不支持自定义字体，也不支持 font 简写，color 尽可能也不要使用简写：</p>\n<pre><code class=\"js\">font: 12px / 14px Arial, sans-serif; \ncolor: #999;\n</code></pre>\n<p>需要写成：</p>\n<pre><code class=\"js\">line-height: 14px; \nfont-size: 12px; \nfont-family: &quot;微软雅黑&quot;, Arial, sans-serif; \ncolor: #999999;\n</code></pre>\n<p>对于加粗字体，我们可以使用 b 标签而不是 CSS 的 font-weight，前文说过，HTML 标签和属性能解决的样式决不使用 CSS 样式。</p>\n<h2 id=\"行高\"><a href=\"#行高\" class=\"headerlink\" title=\"行高\"></a>行高</h2><p>在 OutLook 中会有个默认的行高最小值，特别是当设置 font-family 为微软雅黑时，默认的行高差不多为 Word 中的两倍行距，如果 line-height 设置的值小于默认的行高，无论你设置的是多少，则始终使用默认值，在很多情况下这是不能忍的，好在有个神奇的 mso-line-height-rule，使用行高时添加 mso-line-height-rule:exactly; 就能使行高始终等于我们所设置的值。</p>\n<pre><code class=\"js\">\n&lt;td style=&quot;mso-line-height-rule: exactly; line-height: 36px;&quot;&gt;\n    &lt;!-- ... --&gt;\n&lt;/td&gt;\n</code></pre>\n<p>这只是微软的 CSS 属性，对其他客户端没影响。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://www.ruanyifeng.com/blog/2013/06/html_email.html\">HTML Email 编写指南</a></p>\n","categories":[{"name":"项目总结","path":"api/categories/项目总结.json"}],"tags":[{"name":"踩的坑","path":"api/tags/踩的坑.json"}]}