{"title":"webpack基础03-文件监听","slug":"webpack基础03-文件监听","date":"2020-12-10T07:24:49.000Z","updated":"2022-01-05T09:30:20.947Z","comments":true,"path":"api/articles/webpack基础03-文件监听.json","excerpt":null,"covers":["https://7.dusays.com/2020/12/11/04a511854b09e.png"],"content":"<p>文件监听是指发现源码改变，自动重新构建出新的输出文件。</p>\n<h2 id=\"webpack文件监听方式\"><a href=\"#webpack文件监听方式\" class=\"headerlink\" title=\"webpack文件监听方式\"></a>webpack文件监听方式</h2><p>webpack开启文件监听的方式有两种：</p>\n<ol>\n<li>启动webpack时带上 –watch参数,但是需要手动刷新浏览器</li>\n</ol>\n<pre><code>\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"build\": \"webpack\",\n    \"watch\": \"webpack --watch\"\n  },\n</code></pre>\n<p>唯一缺点需要手动刷新浏览器。</p>\n<ol start=\"2\">\n<li>在配置webpack.config.js中设置watch:true</li>\n</ol>\n<pre><code>module.export = {\n        // 默认false也就是不开启\n        watch: true，\n        watchOptions: {\n            // 监听到数据变化后延迟600毫秒\n            aggregateTimeout: 600,\n            // 监听大量文件会导致大量的 CPU 或内存占用。可以使用正则排除\n            ignored: /node_modules/,\n            // 指定毫秒为单位进行轮询,每一秒检查一次变动\n            poll:1000\n        }\n    }</code></pre>\n<h2 id=\"文件监听原理分析\"><a href=\"#文件监听原理分析\" class=\"headerlink\" title=\"文件监听原理分析\"></a>文件监听原理分析</h2><p>在webpack中监听一个文件发生变化的原理是定时的去获取这个文件的最后编辑时间，每次都存下最新的最后编辑时间，如果发现当前获取的和最后一次保存的最后编辑时间不一致，就认为该文件发生了变化。配置项中的watchOptions.poll就是用于控制定时检查的周期，具体含义是检查多少次。</p>\n<p>当发现某个文件发生了变化，并不会立刻告诉监听者，而是先换成起来，收集一段时间的变化后，再一次性告诉监听者，配置项中的watchOptions.aggregateTimeout就是用于配置这个等待时间。这样做的目的是因为我们在编辑代码的过程中可能会高频的输入文字导致文件变化的事件高频的发生，如果每次都重新执行构建就会让构建卡死。</p>\n<h2 id=\"热更新方式和原理\"><a href=\"#热更新方式和原理\" class=\"headerlink\" title=\"热更新方式和原理\"></a>热更新方式和原理</h2><h3 id=\"热更新的两种方式\"><a href=\"#热更新的两种方式\" class=\"headerlink\" title=\"热更新的两种方式\"></a>热更新的两种方式</h3><ol>\n<li>webpack-dev-server</li>\n</ol>\n<p>wds 通常与 HotModuleReplacementPlugin插件一起使用，wds的一个比较大的优势是，它没有磁盘的io,输出完之后放到内存中，而不是输出为文件，所以构建速度会有一个较大的优势。</p>\n<pre><code>const webpack = require('webpack')\n\nmodule.exports = {\n  devServer: {\n    // 开启 HMR 特性\n    hot: true\n  },\n  plugins: [\n    // HMR 特性所需要的插件\n    new webpack.HotModuleReplacementPlugin()\n  ]\n}</code></pre>\n<ol start=\"2\">\n<li>webpack-dev-middleware</li>\n</ol>\n<p>WDM 将 webpack 输出的文件传输给服务器,使用于灵活的定制场景。</p>\n<pre><code>const express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\napp.use(webpackDevMiddleware(compiler,{\n    publicPath: config.output.publicPath\n}));\n\napp.listen(3000,function(){\n    console.log('Example app listening on post 3000\\n')\n})\n</code></pre>\n<h3 id=\"热更新原理\"><a href=\"#热更新原理\" class=\"headerlink\" title=\"热更新原理\"></a>热更新原理</h3><ul>\n<li>Webpack Compile: 将JS编译成Bundle</li>\n<li>HMR Server： 将热更新的文件输出给HMR Runtime</li>\n<li>Bundle server: 提供文件在浏览器的访问</li>\n<li>HMR Runtime: 会被注入到浏览器，更新文件的变化</li>\n<li>bundle.js 构建输出的文件</li>\n</ul>\n<p><img src=\"https://7.dusays.com/2020/12/11/04a511854b09e.png\"></p>\n","more":"<p>文件监听是指发现源码改变，自动重新构建出新的输出文件。</p>\n<h2 id=\"webpack文件监听方式\"><a href=\"#webpack文件监听方式\" class=\"headerlink\" title=\"webpack文件监听方式\"></a>webpack文件监听方式</h2><p>webpack开启文件监听的方式有两种：</p>\n<ol>\n<li>启动webpack时带上 –watch参数,但是需要手动刷新浏览器</li>\n</ol>\n<pre><code>&quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;build&quot;: &quot;webpack&quot;,\n    &quot;watch&quot;: &quot;webpack --watch&quot;\n  &#125;,\n</code></pre>\n<p>唯一缺点需要手动刷新浏览器。</p>\n<ol start=\"2\">\n<li>在配置webpack.config.js中设置watch:true</li>\n</ol>\n<pre><code>module.export = &#123;\n        // 默认false也就是不开启\n        watch: true，\n        watchOptions: &#123;\n            // 监听到数据变化后延迟600毫秒\n            aggregateTimeout: 600,\n            // 监听大量文件会导致大量的 CPU 或内存占用。可以使用正则排除\n            ignored: /node_modules/,\n            // 指定毫秒为单位进行轮询,每一秒检查一次变动\n            poll:1000\n        &#125;\n    &#125;</code></pre>\n<h2 id=\"文件监听原理分析\"><a href=\"#文件监听原理分析\" class=\"headerlink\" title=\"文件监听原理分析\"></a>文件监听原理分析</h2><p>在webpack中监听一个文件发生变化的原理是定时的去获取这个文件的最后编辑时间，每次都存下最新的最后编辑时间，如果发现当前获取的和最后一次保存的最后编辑时间不一致，就认为该文件发生了变化。配置项中的watchOptions.poll就是用于控制定时检查的周期，具体含义是检查多少次。</p>\n<p>当发现某个文件发生了变化，并不会立刻告诉监听者，而是先换成起来，收集一段时间的变化后，再一次性告诉监听者，配置项中的watchOptions.aggregateTimeout就是用于配置这个等待时间。这样做的目的是因为我们在编辑代码的过程中可能会高频的输入文字导致文件变化的事件高频的发生，如果每次都重新执行构建就会让构建卡死。</p>\n<h2 id=\"热更新方式和原理\"><a href=\"#热更新方式和原理\" class=\"headerlink\" title=\"热更新方式和原理\"></a>热更新方式和原理</h2><h3 id=\"热更新的两种方式\"><a href=\"#热更新的两种方式\" class=\"headerlink\" title=\"热更新的两种方式\"></a>热更新的两种方式</h3><ol>\n<li>webpack-dev-server</li>\n</ol>\n<p>wds 通常与 HotModuleReplacementPlugin插件一起使用，wds的一个比较大的优势是，它没有磁盘的io,输出完之后放到内存中，而不是输出为文件，所以构建速度会有一个较大的优势。</p>\n<pre><code>const webpack = require(&#39;webpack&#39;)\n\nmodule.exports = &#123;\n  devServer: &#123;\n    // 开启 HMR 特性\n    hot: true\n  &#125;,\n  plugins: [\n    // HMR 特性所需要的插件\n    new webpack.HotModuleReplacementPlugin()\n  ]\n&#125;</code></pre>\n<ol start=\"2\">\n<li>webpack-dev-middleware</li>\n</ol>\n<p>WDM 将 webpack 输出的文件传输给服务器,使用于灵活的定制场景。</p>\n<pre><code>const express = require(&#39;express&#39;);\nconst webpack = require(&#39;webpack&#39;);\nconst webpackDevMiddleware = require(&#39;webpack-dev-middleware&#39;);\n\nconst app = express();\nconst config = require(&#39;./webpack.config.js&#39;);\nconst compiler = webpack(config);\n\napp.use(webpackDevMiddleware(compiler,&#123;\n    publicPath: config.output.publicPath\n&#125;));\n\napp.listen(3000,function()&#123;\n    console.log(&#39;Example app listening on post 3000\\n&#39;)\n&#125;)\n</code></pre>\n<h3 id=\"热更新原理\"><a href=\"#热更新原理\" class=\"headerlink\" title=\"热更新原理\"></a>热更新原理</h3><ul>\n<li>Webpack Compile: 将JS编译成Bundle</li>\n<li>HMR Server： 将热更新的文件输出给HMR Runtime</li>\n<li>Bundle server: 提供文件在浏览器的访问</li>\n<li>HMR Runtime: 会被注入到浏览器，更新文件的变化</li>\n<li>bundle.js 构建输出的文件</li>\n</ul>\n<p><img src=\"https://7.dusays.com/2020/12/11/04a511854b09e.png\"></p>\n","categories":[{"name":"webpack专区","path":"api/categories/webpack专区.json"}],"tags":[{"name":"webpack","path":"api/tags/webpack.json"}]}